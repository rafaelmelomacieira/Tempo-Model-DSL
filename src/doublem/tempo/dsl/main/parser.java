
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Jun 09 16:26:13 BRT 2016
//----------------------------------------------------

package doublem.tempo.dsl.main;

import java.text.DecimalFormat;
import java.util.HashMap;
import java.util.HashSet;
import java_cup.runtime.*;

import com.martiansoftware.jsap.*;

import doublem.tempo.dsl.*;
import doublem.tempo.dsl.filetype.tdevice.Field;
import doublem.tempo.dsl.filetype.tdevice.Pattern;
import doublem.tempo.dsl.filetype.tdevice.Register;
import doublem.tempo.dsl.filetype.tdevice.RegisterFormat;
import doublem.tempo.dsl.filetype.tdevice.Variable;
import doublem.tempo.dsl.hfsmd.*;
import doublem.tempo.dsl.ltl.*;
import doublem.tempo.dsl.type.*;

import java.util.logging.Level;
import java.util.logging.Logger;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Jun 09 16:26:13 BRT 2016
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\222\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\016\006\000\002\016\005\000\002\017\011" +
    "\000\002\017\003\000\002\003\004\000\002\003\005\000" +
    "\002\003\004\000\002\003\005\000\002\003\004\000\002" +
    "\003\003\000\002\003\003\000\002\020\006\000\002\020" +
    "\011\000\002\004\007\000\002\005\003\000\002\005\003" +
    "\000\002\014\010\000\002\014\010\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\065\005\000\002\065\007\000\002\006" +
    "\005\000\002\006\004\000\002\006\003\000\002\066\012" +
    "\000\002\066\014\000\002\066\012\000\002\066\014\000" +
    "\002\066\003\000\002\007\012\000\002\007\014\000\002" +
    "\007\012\000\002\007\014\000\002\007\003\000\002\012" +
    "\004\000\002\012\005\000\002\013\007\000\002\013\011" +
    "\000\002\013\010\000\002\013\006\000\002\013\006\000" +
    "\002\013\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\023\006\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\025\003\000\002\025\004" +
    "\000\002\025\004\000\002\025\004\000\002\025\004\000" +
    "\002\026\007\000\002\026\003\000\002\024\003\000\002" +
    "\024\003\000\002\024\003\000\002\027\003\000\002\027" +
    "\003\000\002\027\003\000\002\027\003\000\002\027\003" +
    "\000\002\027\003\000\002\027\004\000\002\027\004\000" +
    "\002\027\004\000\002\027\004\000\002\027\004\000\002" +
    "\027\004\000\002\021\007\000\002\022\003\000\002\022" +
    "\004\000\002\031\011\000\002\031\012\000\002\030\011" +
    "\000\002\030\012\000\002\032\013\000\002\032\011\000" +
    "\002\033\010\000\002\033\006\000\002\064\003\000\002" +
    "\064\003\000\002\064\003\000\002\060\006\000\002\061" +
    "\004\000\002\061\005\000\002\062\005\000\002\063\005" +
    "\000\002\063\005\000\002\063\005\000\002\063\005\000" +
    "\002\063\005\000\002\063\005\000\002\063\005\000\002" +
    "\063\003\000\002\063\003\000\002\034\006\000\002\034" +
    "\006\000\002\052\005\000\002\052\005\000\002\052\005" +
    "\000\002\052\005\000\002\052\004\000\002\052\005\000" +
    "\002\052\003\000\002\051\005\000\002\051\005\000\002" +
    "\051\005\000\002\051\004\000\002\051\004\000\002\051" +
    "\004\000\002\051\005\000\002\051\005\000\002\051\005" +
    "\000\002\051\005\000\002\051\004\000\002\051\005\000" +
    "\002\051\003\000\002\040\003\000\002\040\003\000\002" +
    "\040\003\000\002\040\003\000\002\040\005\000\002\040" +
    "\005\000\002\044\005\000\002\044\005\000\002\044\005" +
    "\000\002\044\005\000\002\044\003\000\002\045\005\000" +
    "\002\045\003\000\002\046\003\000\002\046\003\000\002" +
    "\042\006\000\002\042\006\000\002\043\005\000\002\043" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u013b\000\010\003\006\027\007\032\011\001\002\000" +
    "\010\003\006\027\u013a\032\011\001\002\000\004\002\u0139" +
    "\001\002\000\004\002\ufffb\001\002\000\004\042\u0137\001" +
    "\002\000\004\002\uffff\001\002\000\004\004\012\001\002" +
    "\000\004\042\013\001\002\000\004\005\014\001\002\000" +
    "\004\010\015\001\002\000\020\003\030\030\027\033\025" +
    "\047\016\102\017\103\020\115\024\001\002\000\004\010" +
    "\171\001\002\000\006\042\157\117\156\001\002\000\010" +
    "\003\121\023\122\117\120\001\002\000\004\006\116\001" +
    "\002\000\004\011\ufff5\001\002\000\020\003\030\030\027" +
    "\033\025\047\016\102\017\103\020\115\024\001\002\000" +
    "\004\042\110\001\002\000\004\042\077\001\002\000\020" +
    "\003\030\030\027\033\025\047\016\102\017\103\020\115" +
    "\024\001\002\000\004\042\040\001\002\000\024\003\uffe3" +
    "\006\uffde\011\ufff4\030\uffe3\033\uffe3\047\uffe3\102\uffe3\103" +
    "\uffe3\115\uffe3\001\002\000\004\011\037\001\002\000\020" +
    "\003\030\030\027\033\025\047\016\102\017\103\020\115" +
    "\024\001\002\000\004\006\034\001\002\000\020\003\030" +
    "\030\027\033\025\047\016\102\017\103\020\115\024\001" +
    "\002\000\004\011\ufff9\001\002\000\004\011\ufff8\001\002" +
    "\000\004\002\ufffc\001\002\000\004\010\041\001\002\000" +
    "\016\003\046\020\045\021\044\022\050\024\042\042\051" +
    "\001\002\000\004\014\070\001\002\000\004\042\061\001" +
    "\002\000\004\042\uffcf\001\002\000\004\042\uffd0\001\002" +
    "\000\004\006\uffd1\001\002\000\004\011\060\001\002\000" +
    "\004\042\uffce\001\002\000\004\010\055\001\002\000\004" +
    "\006\053\001\002\000\020\003\046\011\uffd8\020\045\021" +
    "\044\022\050\024\042\042\051\001\002\000\004\011\uffd7" +
    "\001\002\000\016\003\046\020\045\021\044\022\050\024" +
    "\042\042\051\001\002\000\004\011\057\001\002\000\004" +
    "\006\uffd2\001\002\000\020\003\ufff1\030\ufff1\033\ufff1\047" +
    "\ufff1\102\ufff1\103\ufff1\115\ufff1\001\002\000\004\014\062" +
    "\001\002\000\004\044\063\001\002\000\006\007\064\015" +
    "\065\001\002\000\004\044\066\001\002\000\004\006\uffd6" +
    "\001\002\000\004\015\067\001\002\000\004\006\uffd5\001" +
    "\002\000\004\044\071\001\002\000\006\007\072\015\073" +
    "\001\002\000\004\044\074\001\002\000\004\006\uffd3\001" +
    "\002\000\004\015\075\001\002\000\004\006\uffd4\001\002" +
    "\000\004\011\ufff6\001\002\000\004\012\100\001\002\000" +
    "\006\034\102\044\101\001\002\000\004\006\ufff3\001\002" +
    "\000\004\004\103\001\002\000\006\003\104\017\106\001" +
    "\002\000\004\005\uffef\001\002\000\004\005\107\001\002" +
    "\000\004\005\ufff0\001\002\000\004\006\ufff2\001\002\000" +
    "\006\006\111\012\112\001\002\000\020\003\uffe7\030\uffe7" +
    "\033\uffe7\047\uffe7\102\uffe7\103\uffe7\115\uffe7\001\002\000" +
    "\004\044\113\001\002\000\004\006\114\001\002\000\020" +
    "\003\uffe6\030\uffe6\033\uffe6\047\uffe6\102\uffe6\103\uffe6\115" +
    "\uffe6\001\002\000\004\011\ufffa\001\002\000\020\003\030" +
    "\030\027\033\025\047\016\102\017\103\020\115\024\001" +
    "\002\000\004\011\ufff7\001\002\000\004\042\146\001\002" +
    "\000\020\003\uffd9\030\uffd9\033\uffd9\047\uffd9\102\uffd9\103" +
    "\uffd9\115\uffd9\001\002\000\004\042\124\001\002\000\020" +
    "\003\uffe4\030\uffe4\033\uffe4\047\uffe4\102\uffe4\103\uffe4\115" +
    "\uffe4\001\002\000\004\004\125\001\002\000\004\044\126" +
    "\001\002\000\004\005\127\001\002\000\010\010\130\012" +
    "\131\031\132\001\002\000\016\003\046\020\045\021\044" +
    "\022\050\024\042\042\051\001\002\000\004\042\142\001" +
    "\002\000\004\042\133\001\002\000\006\010\134\012\135" +
    "\001\002\000\016\003\046\020\045\021\044\022\050\024" +
    "\042\042\051\001\002\000\004\042\136\001\002\000\004" +
    "\006\137\001\002\000\020\003\uffda\030\uffda\033\uffda\047" +
    "\uffda\102\uffda\103\uffda\115\uffda\001\002\000\004\011\141" +
    "\001\002\000\020\003\uffdc\030\uffdc\033\uffdc\047\uffdc\102" +
    "\uffdc\103\uffdc\115\uffdc\001\002\000\004\006\143\001\002" +
    "\000\020\003\uffdb\030\uffdb\033\uffdb\047\uffdb\102\uffdb\103" +
    "\uffdb\115\uffdb\001\002\000\004\011\145\001\002\000\020" +
    "\003\uffdd\030\uffdd\033\uffdd\047\uffdd\102\uffdd\103\uffdd\115" +
    "\uffdd\001\002\000\004\004\147\001\002\000\004\044\150" +
    "\001\002\000\004\016\151\001\002\000\004\044\152\001" +
    "\002\000\004\005\153\001\002\000\006\006\uffe0\031\154" +
    "\001\002\000\004\042\155\001\002\000\004\006\uffdf\001" +
    "\002\000\004\042\161\001\002\000\006\003\121\023\122" +
    "\001\002\000\020\003\uffe5\030\uffe5\033\uffe5\047\uffe5\102" +
    "\uffe5\103\uffe5\115\uffe5\001\002\000\004\004\162\001\002" +
    "\000\004\044\163\001\002\000\004\016\164\001\002\000" +
    "\004\044\165\001\002\000\004\005\166\001\002\000\006" +
    "\006\uffe2\031\167\001\002\000\004\042\170\001\002\000" +
    "\004\006\uffe1\001\002\000\020\003\203\045\200\046\174" +
    "\050\177\051\202\052\175\116\204\001\002\000\004\042" +
    "\355\001\002\000\022\003\203\011\uffcc\045\200\046\174" +
    "\050\177\051\202\052\175\116\204\001\002\000\004\042" +
    "\uffc0\001\002\000\004\004\337\001\002\000\022\003\203" +
    "\011\uffcb\045\200\046\174\050\177\051\202\052\175\116" +
    "\204\001\002\000\004\042\uffc1\001\002\000\004\042\uffc2" +
    "\001\002\000\022\003\203\011\uffca\045\200\046\174\050" +
    "\177\051\202\052\175\116\204\001\002\000\004\042\327" +
    "\001\002\000\026\003\uffc3\011\uffc3\045\uffc3\046\uffc3\050" +
    "\uffc3\051\uffc3\052\uffc3\053\uffc3\054\uffc3\116\uffc3\001\002" +
    "\000\004\004\211\001\002\000\004\011\210\001\002\000" +
    "\022\003\203\011\uffc9\045\200\046\174\050\177\051\202" +
    "\052\175\116\204\001\002\000\004\011\uffc6\001\002\000" +
    "\004\011\uffcd\001\002\000\004\042\212\001\002\000\004" +
    "\005\213\001\002\000\006\010\214\042\215\001\002\000" +
    "\006\055\217\056\221\001\002\000\004\010\216\001\002" +
    "\000\006\055\217\056\221\001\002\000\004\004\226\001" +
    "\002\000\004\011\225\001\002\000\004\004\222\001\002" +
    "\000\004\057\223\001\002\000\004\005\224\001\002\000" +
    "\004\011\uff97\001\002\000\026\003\uffaf\011\uffaf\045\uffaf" +
    "\046\uffaf\050\uffaf\051\uffaf\052\uffaf\053\uffaf\054\uffaf\116" +
    "\uffaf\001\002\000\030\004\227\042\245\044\231\064\246" +
    "\065\230\066\242\073\235\074\232\075\241\104\243\105" +
    "\233\001\002\000\030\004\227\042\245\044\231\064\246" +
    "\065\230\066\242\073\235\074\232\075\241\104\243\105" +
    "\233\001\002\000\030\004\227\042\245\044\231\064\246" +
    "\065\230\066\242\073\235\074\232\075\241\104\243\105" +
    "\233\001\002\000\040\005\uff74\006\uff74\011\uff74\043\uff74" +
    "\060\uff74\061\uff74\062\uff74\063\uff74\067\uff74\070\uff74\071" +
    "\uff74\076\uff74\077\uff74\100\uff74\101\uff74\001\002\000\026" +
    "\005\uff82\006\uff82\011\uff82\060\uff82\061\uff82\062\uff82\063" +
    "\uff82\067\uff82\070\uff82\071\uff82\001\002\000\004\004\317" +
    "\001\002\000\040\005\uff78\006\uff78\011\uff78\043\uff78\060" +
    "\uff78\061\uff78\062\uff78\063\uff78\067\uff78\070\uff78\071\uff78" +
    "\076\uff78\077\uff78\100\uff78\101\uff78\001\002\000\030\004" +
    "\227\042\245\044\231\064\246\065\230\066\242\073\235" +
    "\074\232\075\241\104\243\105\233\001\002\000\030\005" +
    "\uff7f\006\uff7f\011\uff7f\043\314\060\uff7f\061\uff7f\062\uff7f" +
    "\063\uff7f\067\uff7f\070\uff7f\071\uff7f\001\002\000\022\005" +
    "\313\060\270\061\267\062\266\063\265\067\272\070\273" +
    "\071\271\001\002\000\004\043\307\001\002\000\026\005" +
    "\uff81\006\uff81\011\uff81\060\uff81\061\uff81\062\uff81\063\uff81" +
    "\067\uff81\070\uff81\071\uff81\001\002\000\030\004\227\042" +
    "\245\044\231\064\246\065\230\066\242\073\235\074\232" +
    "\075\241\104\243\105\233\001\002\000\004\004\303\001" +
    "\002\000\040\005\uff75\006\uff75\011\uff75\043\uff75\060\uff75" +
    "\061\uff75\062\uff75\063\uff75\067\uff75\070\uff75\071\uff75\076" +
    "\uff75\077\uff75\100\uff75\101\uff75\001\002\000\042\005\uff80" +
    "\006\uff80\011\uff80\013\257\043\uff70\060\uff80\061\uff80\062" +
    "\uff80\063\uff80\067\uff80\070\uff80\071\uff80\076\uff70\077\uff70" +
    "\100\uff70\101\uff70\001\002\000\030\004\227\042\245\044" +
    "\231\064\246\065\230\066\242\073\235\074\232\075\241" +
    "\104\243\105\233\001\002\000\040\005\uff76\006\uff76\011" +
    "\uff76\043\uff76\060\uff76\061\uff76\062\uff76\063\uff76\067\uff76" +
    "\070\uff76\071\uff76\076\253\077\254\100\251\101\252\001" +
    "\002\000\022\005\uff83\060\uff83\061\uff83\062\uff83\063\uff83" +
    "\067\uff83\070\uff83\071\uff83\001\002\000\006\042\256\044" +
    "\231\001\002\000\006\042\256\044\231\001\002\000\006" +
    "\042\256\044\231\001\002\000\006\042\256\044\231\001" +
    "\002\000\040\005\uff7b\006\uff7b\011\uff7b\043\uff7b\060\uff7b" +
    "\061\uff7b\062\uff7b\063\uff7b\067\uff7b\070\uff7b\071\uff7b\076" +
    "\uff7b\077\uff7b\100\251\101\252\001\002\000\042\005\uff70" +
    "\006\uff70\011\uff70\013\257\043\uff70\060\uff70\061\uff70\062" +
    "\uff70\063\uff70\067\uff70\070\uff70\071\uff70\076\uff70\077\uff70" +
    "\100\uff70\101\uff70\001\002\000\004\042\256\001\002\000" +
    "\040\005\uff71\006\uff71\011\uff71\043\uff71\060\uff71\061\uff71" +
    "\062\uff71\063\uff71\067\uff71\070\uff71\071\uff71\076\uff71\077" +
    "\uff71\100\uff71\101\uff71\001\002\000\040\005\uff7c\006\uff7c" +
    "\011\uff7c\043\uff7c\060\uff7c\061\uff7c\062\uff7c\063\uff7c\067" +
    "\uff7c\070\uff7c\071\uff7c\076\uff7c\077\uff7c\100\251\101\252" +
    "\001\002\000\040\005\uff79\006\uff79\011\uff79\043\uff79\060" +
    "\uff79\061\uff79\062\uff79\063\uff79\067\uff79\070\uff79\071\uff79" +
    "\076\uff79\077\uff79\100\uff79\101\uff79\001\002\000\040\005" +
    "\uff7a\006\uff7a\011\uff7a\043\uff7a\060\uff7a\061\uff7a\062\uff7a" +
    "\063\uff7a\067\uff7a\070\uff7a\071\uff7a\076\uff7a\077\uff7a\100" +
    "\uff7a\101\uff7a\001\002\000\022\005\uff8c\060\uff8c\061\uff8c" +
    "\062\uff8c\063\uff8c\067\uff8c\070\uff8c\071\uff8c\001\002\000" +
    "\030\004\227\042\245\044\231\064\246\065\230\066\242" +
    "\073\235\074\232\075\241\104\243\105\233\001\002\000" +
    "\030\004\227\042\245\044\231\064\246\065\230\066\242" +
    "\073\235\074\232\075\241\104\243\105\233\001\002\000" +
    "\030\004\227\042\245\044\231\064\246\065\230\066\242" +
    "\073\235\074\232\075\241\104\243\105\233\001\002\000" +
    "\030\004\227\042\245\044\231\064\246\065\230\066\242" +
    "\073\235\074\232\075\241\104\243\105\233\001\002\000" +
    "\030\004\227\042\245\044\231\064\246\065\230\066\242" +
    "\073\235\074\232\075\241\104\243\105\233\001\002\000" +
    "\030\004\227\042\245\044\231\064\246\065\230\066\242" +
    "\073\235\074\232\075\241\104\243\105\233\001\002\000" +
    "\030\004\227\042\245\044\231\064\246\065\230\066\242" +
    "\073\235\074\232\075\241\104\243\105\233\001\002\000" +
    "\022\005\uff8e\060\uff8e\061\uff8e\062\uff8e\063\uff8e\067\272" +
    "\070\273\071\271\001\002\000\022\005\uff8f\060\uff8f\061" +
    "\uff8f\062\uff8f\063\uff8f\067\272\070\273\071\271\001\002" +
    "\000\022\005\uff8d\060\uff8d\061\uff8d\062\uff8d\063\uff8d\067" +
    "\272\070\273\071\271\001\002\000\022\005\uff88\060\uff88" +
    "\061\uff88\062\uff88\063\uff88\067\272\070\273\071\271\001" +
    "\002\000\022\005\uff89\060\uff89\061\uff89\062\uff89\063\uff89" +
    "\067\272\070\273\071\271\001\002\000\022\005\uff87\060" +
    "\uff87\061\uff87\062\uff87\063\uff87\067\272\070\273\071\271" +
    "\001\002\000\022\005\uff86\060\uff86\061\uff86\062\uff86\063" +
    "\uff86\067\272\070\273\071\271\001\002\000\004\042\256" +
    "\001\002\000\004\005\305\001\002\000\030\005\uff73\006" +
    "\uff73\011\uff73\043\uff73\060\uff73\061\uff73\062\uff73\063\uff73" +
    "\067\uff73\070\uff73\071\uff73\001\002\000\022\005\uff8b\060" +
    "\uff8b\061\uff8b\062\uff8b\063\uff8b\067\uff8b\070\uff8b\071\uff8b" +
    "\001\002\000\006\042\256\044\231\001\002\000\030\005" +
    "\uff7d\006\uff7d\011\uff7d\043\uff77\060\uff7d\061\uff7d\062\uff7d" +
    "\063\uff7d\067\uff7d\070\uff7d\071\uff7d\001\002\000\006\042" +
    "\256\044\231\001\002\000\030\005\uff77\006\uff77\011\uff77" +
    "\043\uff77\060\uff77\061\uff77\062\uff77\063\uff77\067\uff77\070" +
    "\uff77\071\uff77\001\002\000\004\011\uff98\001\002\000\006" +
    "\042\256\044\231\001\002\000\030\005\uff7e\006\uff7e\011" +
    "\uff7e\043\311\060\uff7e\061\uff7e\062\uff7e\063\uff7e\067\uff7e" +
    "\070\uff7e\071\uff7e\001\002\000\022\005\uff85\060\uff85\061" +
    "\uff85\062\uff85\063\uff85\067\uff85\070\uff85\071\uff85\001\002" +
    "\000\004\042\256\001\002\000\004\005\321\001\002\000" +
    "\030\005\uff72\006\uff72\011\uff72\043\uff72\060\uff72\061\uff72" +
    "\062\uff72\063\uff72\067\uff72\070\uff72\071\uff72\001\002\000" +
    "\022\005\uff8a\060\uff8a\061\uff8a\062\uff8a\063\uff8a\067\uff8a" +
    "\070\uff8a\071\uff8a\001\002\000\022\005\324\060\270\061" +
    "\267\062\266\063\265\067\272\070\273\071\271\001\002" +
    "\000\022\005\uff84\060\uff84\061\uff84\062\uff84\063\uff84\067" +
    "\uff84\070\uff84\071\uff84\001\002\000\004\011\326\001\002" +
    "\000\026\003\uffb0\011\uffb0\045\uffb0\046\uffb0\050\uffb0\051" +
    "\uffb0\052\uffb0\053\uffb0\054\uffb0\116\uffb0\001\002\000\004" +
    "\010\330\001\002\000\012\003\203\045\200\046\174\050" +
    "\177\001\002\000\014\003\203\011\uffb2\045\200\046\174" +
    "\050\177\001\002\000\004\011\333\001\002\000\026\003" +
    "\uffb3\011\uffb3\045\uffb3\046\uffb3\050\uffb3\051\uffb3\052\uffb3" +
    "\053\uffb3\054\uffb3\116\uffb3\001\002\000\004\011\uffb1\001" +
    "\002\000\004\011\uffc5\001\002\000\004\011\uffc7\001\002" +
    "\000\010\112\343\113\342\114\341\001\002\000\004\005" +
    "\344\001\002\000\004\005\uffa6\001\002\000\004\005\uffa7" +
    "\001\002\000\004\005\uffa8\001\002\000\006\010\345\042" +
    "\346\001\002\000\006\055\217\056\221\001\002\000\004" +
    "\010\347\001\002\000\006\055\217\056\221\001\002\000" +
    "\004\011\351\001\002\000\026\003\uffad\011\uffad\045\uffad" +
    "\046\uffad\050\uffad\051\uffad\052\uffad\053\uffad\054\uffad\116" +
    "\uffad\001\002\000\004\011\353\001\002\000\026\003\uffae" +
    "\011\uffae\045\uffae\046\uffae\050\uffae\051\uffae\052\uffae\053" +
    "\uffae\054\uffae\116\uffae\001\002\000\004\011\uffc8\001\002" +
    "\000\004\010\356\001\002\000\024\003\203\045\200\046" +
    "\174\050\177\051\202\052\175\053\363\054\365\116\204" +
    "\001\002\000\004\011\u0136\001\002\000\026\003\203\011" +
    "\uffbd\045\200\046\174\050\177\051\202\052\175\053\363" +
    "\054\365\116\204\001\002\000\026\003\203\011\uffbe\045" +
    "\200\046\174\050\177\051\202\052\175\053\363\054\365" +
    "\116\204\001\002\000\026\003\203\011\uffbc\045\200\046" +
    "\174\050\177\051\202\052\175\053\363\054\365\116\204" +
    "\001\002\000\004\004\u012a\001\002\000\026\003\203\011" +
    "\uffba\045\200\046\174\050\177\051\202\052\175\053\363" +
    "\054\365\116\204\001\002\000\004\010\372\001\002\000" +
    "\026\003\203\011\uffbb\045\200\046\174\050\177\051\202" +
    "\052\175\053\363\054\365\116\204\001\002\000\026\003" +
    "\203\011\uffbf\045\200\046\174\050\177\051\202\052\175" +
    "\053\363\054\365\116\204\001\002\000\004\011\uffb9\001" +
    "\002\000\004\011\uffb5\001\002\000\022\004\375\042\245" +
    "\044\231\073\373\074\232\075\241\104\243\105\233\001" +
    "\002\000\022\004\375\042\245\044\231\073\373\074\232" +
    "\075\241\104\243\105\233\001\002\000\020\005\uff90\006" +
    "\uff90\011\uff90\060\uff90\061\uff90\062\uff90\063\uff90\001\002" +
    "\000\022\004\375\042\245\044\231\073\373\074\232\075" +
    "\241\104\243\105\233\001\002\000\016\006\u0101\011\377" +
    "\060\u0104\061\u0103\062\u0102\063\u0100\001\002\000\026\003" +
    "\uffa9\011\uffa9\045\uffa9\046\uffa9\050\uffa9\051\uffa9\052\uffa9" +
    "\053\uffa9\054\uffa9\116\uffa9\001\002\000\022\004\375\042" +
    "\245\044\231\073\373\074\232\075\241\104\243\105\233" +
    "\001\002\000\004\072\u0109\001\002\000\022\004\375\042" +
    "\245\044\231\073\373\074\232\075\241\104\243\105\233" +
    "\001\002\000\022\004\375\042\245\044\231\073\373\074" +
    "\232\075\241\104\243\105\233\001\002\000\022\004\375" +
    "\042\245\044\231\073\373\074\232\075\241\104\243\105" +
    "\233\001\002\000\020\005\uff95\006\uff95\011\uff95\060\uff95" +
    "\061\uff95\062\uff95\063\uff95\001\002\000\020\005\uff96\006" +
    "\uff96\011\uff96\060\uff96\061\uff96\062\uff96\063\uff96\001\002" +
    "\000\020\005\uff94\006\uff94\011\uff94\060\uff94\061\uff94\062" +
    "\uff94\063\uff94\001\002\000\004\011\u0124\001\002\000\004" +
    "\010\u010a\001\002\000\004\042\u010d\001\002\000\004\011" +
    "\u0123\001\002\000\004\006\u0121\001\002\000\004\012\u010e" +
    "\001\002\000\010\004\u0111\042\u0112\044\u0110\001\002\000" +
    "\020\006\uffa2\076\u0118\077\u0119\100\u0116\101\u0117\110\u011a" +
    "\111\u0114\001\002\000\022\005\uff99\006\uff99\076\uff99\077" +
    "\uff99\100\uff99\101\uff99\110\uff99\111\uff99\001\002\000\010" +
    "\004\u0111\042\u0112\044\u0110\001\002\000\022\005\uff9a\006" +
    "\uff9a\076\uff9a\077\uff9a\100\uff9a\101\uff9a\110\uff9a\111\uff9a" +
    "\001\002\000\020\005\u0115\076\u0118\077\u0119\100\u0116\101" +
    "\u0117\110\u011a\111\u0114\001\002\000\010\004\u0111\042\u0112" +
    "\044\u0110\001\002\000\022\005\uffa1\006\uffa1\076\uffa1\077" +
    "\uffa1\100\uffa1\101\uffa1\110\uffa1\111\uffa1\001\002\000\010" +
    "\004\u0111\042\u0112\044\u0110\001\002\000\010\004\u0111\042" +
    "\u0112\044\u0110\001\002\000\010\004\u0111\042\u0112\044\u0110" +
    "\001\002\000\010\004\u0111\042\u0112\044\u0110\001\002\000" +
    "\010\004\u0111\042\u0112\044\u0110\001\002\000\022\005\uff9c" +
    "\006\uff9c\076\uff9c\077\uff9c\100\uff9c\101\uff9c\110\uff9c\111" +
    "\uff9c\001\002\000\022\005\uff9f\006\uff9f\076\uff9f\077\uff9f" +
    "\100\u0116\101\u0117\110\u011a\111\u0114\001\002\000\022\005" +
    "\uffa0\006\uffa0\076\uffa0\077\uffa0\100\u0116\101\u0117\110\u011a" +
    "\111\u0114\001\002\000\022\005\uff9d\006\uff9d\076\uff9d\077" +
    "\uff9d\100\uff9d\101\uff9d\110\u011a\111\u0114\001\002\000\022" +
    "\005\uff9e\006\uff9e\076\uff9e\077\uff9e\100\uff9e\101\uff9e\110" +
    "\u011a\111\u0114\001\002\000\022\005\uff9b\006\uff9b\076\uff9b" +
    "\077\uff9b\100\uff9b\101\uff9b\110\uff9b\111\uff9b\001\002\000" +
    "\006\011\uffa4\042\u010d\001\002\000\004\011\uffa3\001\002" +
    "\000\004\011\uffa5\001\002\000\026\003\uffaa\011\uffaa\045" +
    "\uffaa\046\uffaa\050\uffaa\051\uffaa\052\uffaa\053\uffaa\054\uffaa" +
    "\116\uffaa\001\002\000\020\005\uff93\006\uff93\011\uff93\060" +
    "\uff93\061\uff93\062\uff93\063\uff93\001\002\000\014\005\u0127" +
    "\060\u0104\061\u0103\062\u0102\063\u0100\001\002\000\020\005" +
    "\uff91\006\uff91\011\uff91\060\uff91\061\uff91\062\uff91\063\uff91" +
    "\001\002\000\020\005\uff92\006\uff92\011\uff92\060\uff92\061" +
    "\uff92\062\uff92\063\uff92\001\002\000\004\011\uffb4\001\002" +
    "\000\004\042\u012b\001\002\000\004\005\u012c\001\002\000" +
    "\004\010\u012d\001\002\000\022\004\375\042\245\044\231" +
    "\073\373\074\232\075\241\104\243\105\233\001\002\000" +
    "\016\006\u0130\011\u012f\060\u0104\061\u0103\062\u0102\063\u0100" +
    "\001\002\000\026\003\uffab\011\uffab\045\uffab\046\uffab\050" +
    "\uffab\051\uffab\052\uffab\053\uffab\054\uffab\116\uffab\001\002" +
    "\000\004\072\u0109\001\002\000\004\011\u0132\001\002\000" +
    "\026\003\uffac\011\uffac\045\uffac\046\uffac\050\uffac\051\uffac" +
    "\052\uffac\053\uffac\054\uffac\116\uffac\001\002\000\004\011" +
    "\uffb6\001\002\000\004\011\uffb8\001\002\000\004\011\uffb7" +
    "\001\002\000\026\003\uffc4\011\uffc4\045\uffc4\046\uffc4\050" +
    "\uffc4\051\uffc4\052\uffc4\053\uffc4\054\uffc4\116\uffc4\001\002" +
    "\000\004\006\u0138\001\002\000\010\003\ufffd\027\ufffd\032" +
    "\ufffd\001\002\000\004\002\000\001\002\000\004\042\u013c" +
    "\001\002\000\004\002\001\001\002\000\004\006\u013d\001" +
    "\002\000\010\003\ufffe\027\ufffe\032\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u013b\000\010\002\004\016\003\017\007\001\001\000" +
    "\004\017\u013a\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\003\030\004\022\006\031\020\032\023\021\065\025\066" +
    "\020\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\122\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\003\114\004\022\006\031\020\032\023\021\065\025" +
    "\066\020\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\003\075\004\022\006\031\020\032\023\021\065\025" +
    "\066\020\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\003\035\004\022\006\031\020\032" +
    "\023\021\065\025\066\020\001\001\000\002\001\001\000" +
    "\020\003\034\004\022\006\031\020\032\023\021\065\025" +
    "\066\020\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\010\042\012\046" +
    "\013\051\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\010\042\012\053\013\051\001\001\000\002" +
    "\001\001\000\010\010\042\012\055\013\051\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\104\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\003\116\004\022\006\031\020\032\023\021\065\025" +
    "\066\020\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\010\042\012\143\013\051\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\010" +
    "\042\012\137\013\051\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\157\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\021\200\024\171\025\204\026" +
    "\205\030\172\031\175\001\001\000\002\001\001\000\016" +
    "\021\200\024\171\025\353\026\205\030\172\031\175\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\021\200" +
    "\024\171\025\335\026\205\030\172\031\175\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\021\200\024\171" +
    "\025\334\026\205\030\172\031\175\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\021\200\024\171\025\206\026\205\030\172\031" +
    "\175\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\034" +
    "\324\001\001\000\002\001\001\000\004\034\217\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\040\247\042\235\043\243\044\246\045" +
    "\237\046\233\051\236\001\001\000\020\040\247\042\235" +
    "\043\243\044\246\045\237\046\233\051\322\001\001\000" +
    "\020\040\247\042\235\043\243\044\246\045\237\046\233" +
    "\051\321\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\040\247\042\235" +
    "\043\243\044\246\045\237\046\233\051\315\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\040\247\042\235\043\243\044\246\045" +
    "\237\046\233\051\305\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\040\247\042\235\043" +
    "\243\044\246\045\237\046\233\051\263\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\043\243\044\262\046" +
    "\233\001\001\000\010\043\243\044\261\046\233\001\001" +
    "\000\010\043\243\044\260\046\233\001\001\000\010\043" +
    "\243\044\254\046\233\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\043\257\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\040\247\042\235\043\243\044\246\045" +
    "\237\046\233\051\301\001\001\000\020\040\247\042\235" +
    "\043\243\044\246\045\237\046\233\051\300\001\001\000" +
    "\020\040\247\042\235\043\243\044\246\045\237\046\233" +
    "\051\277\001\001\000\020\040\247\042\235\043\243\044" +
    "\246\045\237\046\233\051\276\001\001\000\020\040\247" +
    "\042\235\043\243\044\246\045\237\046\233\051\275\001" +
    "\001\000\020\040\247\042\235\043\243\044\246\045\237" +
    "\046\233\051\274\001\001\000\020\040\247\042\235\043" +
    "\243\044\246\045\237\046\233\051\273\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\043\303\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\043\243\044\246\045\307" +
    "\046\233\001\001\000\002\001\001\000\012\043\243\044" +
    "\246\045\311\046\233\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\043\243\044\246\045\314\046\233\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\043\317" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\022\331\024" +
    "\171\026\330\001\001\000\010\022\333\024\171\026\330" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\064\337" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\034\351" +
    "\001\001\000\002\001\001\000\004\034\347\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\021" +
    "\363\024\171\026\366\027\356\030\357\031\360\032\361" +
    "\033\365\001\001\000\002\001\001\000\022\021\363\024" +
    "\171\026\366\027\u0134\030\357\031\360\032\361\033\365" +
    "\001\001\000\022\021\363\024\171\026\366\027\u0133\030" +
    "\357\031\360\032\361\033\365\001\001\000\022\021\363" +
    "\024\171\026\366\027\u0132\030\357\031\360\032\361\033" +
    "\365\001\001\000\002\001\001\000\022\021\363\024\171" +
    "\026\366\027\u0128\030\357\031\360\032\361\033\365\001" +
    "\001\000\002\001\001\000\022\021\363\024\171\026\366" +
    "\027\370\030\357\031\360\032\361\033\365\001\001\000" +
    "\022\021\363\024\171\026\366\027\367\030\357\031\360" +
    "\032\361\033\365\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\040\373\042\235\043\243\044\246\045\237" +
    "\046\233\052\375\001\001\000\020\040\373\042\235\043" +
    "\243\044\246\045\237\046\233\052\u0127\001\001\000\002" +
    "\001\001\000\020\040\373\042\235\043\243\044\246\045" +
    "\237\046\233\052\u0125\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\040\373\042\235\043\243\044\246\045" +
    "\237\046\233\052\u0124\001\001\000\004\060\u0107\001\001" +
    "\000\020\040\373\042\235\043\243\044\246\045\237\046" +
    "\233\052\u0106\001\001\000\020\040\373\042\235\043\243" +
    "\044\246\045\237\046\233\052\u0105\001\001\000\020\040" +
    "\373\042\235\043\243\044\246\045\237\046\233\052\u0104" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\061\u010a" +
    "\062\u010b\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\063\u010e\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\063\u0112\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\063\u011f\001\001\000\002" +
    "\001\001\000\004\063\u011e\001\001\000\004\063\u011d\001" +
    "\001\000\004\063\u011c\001\001\000\004\063\u011b\001\001" +
    "\000\004\063\u011a\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\061\u0121\062\u010b\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\040\373\042\235\043\243\044" +
    "\246\045\237\046\233\052\u012d\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\060\u0130\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	
	public static Lex myLex;
	
	private TDCCheckerGenerator tdevcGen;
	
	static Integer baseAddress;
	static String  absoluteDir;
	static String  kernelImageDir;
	static String  appName;
	static String  codeType;
	static double  initialTime;
	//static String  projName;
	
	//1: DevC File Path 
	//2: Base Address
	//3: appname
	//4: Platform Path
	//5: Kernel Image Path
	
	public static JSAP getJSAP(){
		JSAP jsap = new JSAP();
		Switch helpSAP = new Switch("help")
										.setShortFlag('h')
										.setLongFlag("help");
		Switch snifferSAP = new Switch("sniffer")
										.setShortFlag('s')
										.setLongFlag("sniffer");
		FlaggedOption languageSAP = new FlaggedOption("language")
        								.setShortFlag('l')
        								.setDefault("c")
        								.setLongFlag("codelanguage");
		FlaggedOption baseaddressSAP = new FlaggedOption("baseaddress")
										.setRequired(false)
										.setShortFlag('a')
										.setLongFlag("baseaddress");
		FlaggedOption kernelSAP = new FlaggedOption("kernel")
										.setRequired(false)
										.setShortFlag('k')
										.setLongFlag("kernel");
		FlaggedOption projectSAP = new FlaggedOption("project")
										.setRequired(false)
										.setShortFlag('p')
										.setLongFlag("project");
		FlaggedOption platformSAP = new FlaggedOption("platform")
										.setRequired(false)
										.setShortFlag('d')
										.setLongFlag("platformpath");
		UnflaggedOption descSAP = new UnflaggedOption("desc")
										.setRequired(false)
										.setStringParser(JSAP.STRING_PARSER);

		

		helpSAP.setHelp("Shows the list of arguments");
		snifferSAP.setHelp("Generates the Sniffer's Device Driver code");
		languageSAP.setHelp("Defines the generated code language [c; cpp; verilog; systemverilog; vhdl]");
		platformSAP.setHelp("Specifies the Virtual Platform absolute path");
		baseaddressSAP.setHelp("Defines the device base address");
		kernelSAP.setHelp("Defines if this project is using a linux kernel and specifies the kernel image path");
		projectSAP.setHelp("Defines the name of the project/driver under validation");
		descSAP.setHelp("Specifies the DevC file absolte path");
		try {
			jsap.registerParameter(helpSAP);
			jsap.registerParameter(snifferSAP);
			jsap.registerParameter(languageSAP);
			jsap.registerParameter(baseaddressSAP);
			jsap.registerParameter(kernelSAP);
			jsap.registerParameter(platformSAP);
			jsap.registerParameter(projectSAP);
			jsap.registerParameter(descSAP);
		} catch (JSAPException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return jsap;
	}
	
	public void setTDCCheckerGenerator(TDCCheckerGenerator tdevcGen){
		this.tdevcGen = tdevcGen;
	}
	
	public TDCCheckerGenerator getTDCCheckerGenerator(){
		return this.tdevcGen;
	}
	
	/*public static void main(String args[]) throws Exception {
		initialTime = System.currentTimeMillis();
		SymbolFactory sf = new DefaultSymbolFactory();
		
		String desc = "";
		JSAP jsap = getJSAP();
		JSAPResult jsapResut = jsap.parse(args);
		
		if (jsapResut.success()){
			if (jsapResut.getBoolean("help")){
				System.out.println(jsap.getUsage());
				System.out.println();
				System.out.println(jsap.getHelp());
			}else{
				baseAddress = Integer.parseInt(jsapResut.getString("baseaddress"),16);
				appName = jsapResut.getString("project");
				absoluteDir = jsapResut.getString("platform");
				if (jsapResut.contains("kernel")){
					kernelImageDir = jsapResut.getString("kernel");
				}else{
					kernelImageDir = "";
				}
				codeType = jsapResut.getString("language");
				desc = jsapResut.getStringArray("desc")[0];
				
				myLex = new Lex(new java.io.FileInputStream(desc),sf);
				//new parser(myLex,sf).parse(); //old JFlex
				new parser(myLex).parse();
			}
		}else{
			for (java.util.Iterator errs = jsapResut.getErrorMessageIterator();errs.hasNext();) {
				System.err.println("Error: " + errs.next());
			}
		}
		/*codeType = args[0];
		baseAddress = Integer.parseInt(args[2],16); 
		appName = args[3];
		absoluteDir = args[4];
		if (args.length > 4){
			kernelImageDir = args[5];
		}else{
			kernelImageDir = "";
		}*/
		/*if (args.length==0){
			myLex = new Lex(System.in,sf);
			new parser(myLex,sf).parse();
		}else{
			myLex = new Lex(new java.io.FileInputStream(args[1]),sf);
			new parser(myLex,sf).parse();
		}* /
	}*/
	//public static void addParam

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // reg_ref_decl ::= T_IDENT 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = id; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reg_ref_decl",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // reg_ref_decl ::= T_IDENT T_DOT reg_ref_decl 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int regleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int regright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String reg = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = id +"."+ reg;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("reg_ref_decl",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // reg_access ::= T_REGREAD T_OPEN_PAR reg_ref_decl T_CLOSE_PAR 
            {
              AccessPropositionExpression RESULT =null;
		int regleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int regright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String reg = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	RESULT = new AccessPropositionExpression(AccessPropositionExpression.LocalAccessType.READ, reg);
	//RESULT = "READ%" + reg;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("reg_access",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // reg_access ::= T_REGWRITE T_OPEN_PAR reg_ref_decl T_CLOSE_PAR 
            {
              AccessPropositionExpression RESULT =null;
		int regleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int regright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String reg = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	RESULT = new AccessPropositionExpression(AccessPropositionExpression.LocalAccessType.WRITE, reg);
	//RESULT = "WRITE%" + reg;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("reg_access",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // reg_val ::= T_INT 
            {
              String RESULT =null;
		int int1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int int1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String int1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = int1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reg_val",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // reg_val ::= reg_ref_decl 
            {
              String RESULT =null;
		int regleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int regright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String reg = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= reg; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reg_val",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // reg_comp_expr ::= reg_expr 
            {
              String RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = exp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reg_comp_expr",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // reg_comp_expr ::= reg_comp_expr T_OPER reg_comp_expr 
            {
              String RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = "(" + id1 + " " + op + " " + id2 + ")";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("reg_comp_expr",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // reg_expr ::= reg_val 
            {
              String RESULT =null;
		int regleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int regright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String reg = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = reg; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reg_expr",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // reg_expr ::= reg_expr T_DIV reg_expr 
            {
              String RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = "(" + id1 + " / " + id2 + ")"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reg_expr",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // reg_expr ::= reg_expr T_MULT reg_expr 
            {
              String RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = "(" + id1 + " * " + id2 + ")"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reg_expr",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // reg_expr ::= reg_expr T_MINUS reg_expr 
            {
              String RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = "(" + id1 + " - " + id2 + ")"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reg_expr",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // reg_expr ::= reg_expr T_PLUS reg_expr 
            {
              String RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = "(" + id1 + " + " + id2 + ")"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reg_expr",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // proposition_expr ::= reg_comp_expr T_OPER reg_comp_expr 
            {
              PropositionExpression RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = new IdentifierPropositionExpression("(" + id1 + " " + op + " " + id2 + ")");
	//RESULT = "(" + id1 + " " + op + " " + id2 + ")";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("proposition_expr",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // proposition_expr ::= reg_access T_OPER reg_comp_expr 
            {
              PropositionExpression RESULT =null;
		int regleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int regright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AccessPropositionExpression reg = (AccessPropositionExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	CompositePropositionExpression compExp = new CompositePropositionExpression(true);
	compExp.addPropostionExpr(reg);
	compExp.addPropostionExpr(new IdentifierPropositionExpression("(" + reg.getFieldRep() + " " + op + " " + id2 + ")"));
	RESULT = compExp; 
	//RESULT = reg;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("proposition_expr",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // proposition_expr ::= reg_access 
            {
              PropositionExpression RESULT =null;
		int regleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int regright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AccessPropositionExpression reg = (AccessPropositionExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = reg;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("proposition_expr",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // proposition_expr ::= T_IDENT 
            {
              PropositionExpression RESULT =null;
		int stateleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stateright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String state = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IdentifierPropositionExpression(state);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proposition_expr",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // proposition_expr ::= T_FALSE 
            {
              PropositionExpression RESULT =null;
		 RESULT = new BooleanPropositionExpression(BooleanPropositionExpression.LocalBooleanType.FALSE);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proposition_expr",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // proposition_expr ::= T_TRUE 
            {
              PropositionExpression RESULT =null;
		 RESULT = new BooleanPropositionExpression(BooleanPropositionExpression.LocalBooleanType.TRUE);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proposition_expr",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // ltl_logic_expr ::= proposition_expr 
            {
              LTLRuleTerm RESULT =null;
		int propleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int propright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PropositionExpression prop = (PropositionExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	Integer propID;
	propID = this.parser.getTDCCheckerGenerator().addLTLProposition(prop.toString());
	//TDCCheckerGenerator.getInstance().addTerm(newName);
	RESULT = LTLRuleTermFactory.getInstance().getNewLTLRuleTerm("q" + propID, "q" + propID + "");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ltl_logic_expr",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // ltl_logic_expr ::= T_OPEN_PAR ltl_logic_expr T_CLOSE_PAR 
            {
              LTLRuleTerm RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int termright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LTLRuleTerm term = (LTLRuleTerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	//LTLRuleTerm esq = new LTLRuleTerm("(");
	//LTLRuleTerm dir = new LTLRuleTerm(")");
	RESULT = LTLRuleTermFactory.getInstance().getNewLTLRuleTerm("(" + term.getTerm() + ")");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ltl_logic_expr",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // ltl_logic_expr ::= T_PROP_NEG_OPER ltl_logic_expr 
            {
              LTLRuleTerm RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LTLRuleTerm term = (LTLRuleTerm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = LTLRuleTermFactory.getInstance().getNewLTLRuleTerm("!" + term.getTerm());

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ltl_logic_expr",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // ltl_logic_expr ::= ltl_logic_expr T_BOOL_DISJ ltl_logic_expr 
            {
              LTLRuleTerm RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int termright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LTLRuleTerm term = (LTLRuleTerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int term2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int term2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LTLRuleTerm term2 = (LTLRuleTerm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = LTLRuleTermFactory.getInstance().getNewLTLRuleTerm(term.getTerm() + " || " + term2.getTerm());

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ltl_logic_expr",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // ltl_logic_expr ::= ltl_logic_expr T_BOOL_CONJ ltl_logic_expr 
            {
              LTLRuleTerm RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int termright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LTLRuleTerm term = (LTLRuleTerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int term2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int term2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LTLRuleTerm term2 = (LTLRuleTerm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = LTLRuleTermFactory.getInstance().getNewLTLRuleTerm(term.getTerm() + " && " + term2.getTerm());

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ltl_logic_expr",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // ltl_logic_expr ::= ltl_logic_expr T_BOOL_IMPL ltl_logic_expr 
            {
              LTLRuleTerm RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int termright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LTLRuleTerm term = (LTLRuleTerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int term2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int term2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LTLRuleTerm term2 = (LTLRuleTerm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = LTLRuleTermFactory.getInstance().getNewLTLRuleTerm(term.getTerm() + " -> " + term2.getTerm());

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ltl_logic_expr",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // ltl_logic_expr ::= ltl_logic_expr T_BOOL_EQUI ltl_logic_expr 
            {
              LTLRuleTerm RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int termright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LTLRuleTerm term = (LTLRuleTerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int term2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int term2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LTLRuleTerm term2 = (LTLRuleTerm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = LTLRuleTermFactory.getInstance().getNewLTLRuleTerm(term.getTerm() + " <-> " + term2.getTerm());

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ltl_logic_expr",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // ltl_logic_expr ::= T_NEXT_OPER ltl_logic_expr 
            {
              LTLRuleTerm RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LTLRuleTerm term = (LTLRuleTerm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = LTLRuleTermFactory.getInstance().getNewLTLRuleTerm("()" + term.getTerm());

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ltl_logic_expr",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // ltl_logic_expr ::= T_EVENT_OPER ltl_logic_expr 
            {
              LTLRuleTerm RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LTLRuleTerm term = (LTLRuleTerm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = LTLRuleTermFactory.getInstance().getNewLTLRuleTerm("<>" + term.getTerm());

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ltl_logic_expr",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // ltl_logic_expr ::= T_ALWAYS_OPER ltl_logic_expr 
            {
              LTLRuleTerm RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LTLRuleTerm term = (LTLRuleTerm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = LTLRuleTermFactory.getInstance().getNewLTLRuleTerm("[]" + term.getTerm());

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ltl_logic_expr",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // ltl_logic_expr ::= ltl_logic_expr T_DUAL_UNTIL_OPER ltl_logic_expr 
            {
              LTLRuleTerm RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int termright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LTLRuleTerm term = (LTLRuleTerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int term2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int term2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LTLRuleTerm term2 = (LTLRuleTerm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = LTLRuleTermFactory.getInstance().getNewLTLRuleTerm(term.getTerm() + " D " + term2.getTerm());

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ltl_logic_expr",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // ltl_logic_expr ::= ltl_logic_expr T_WEAK_UNTIL_OPER ltl_logic_expr 
            {
              LTLRuleTerm RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int termright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LTLRuleTerm term = (LTLRuleTerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int term2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int term2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LTLRuleTerm term2 = (LTLRuleTerm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = LTLRuleTermFactory.getInstance().getNewLTLRuleTerm(term.getTerm() + " W " + term2.getTerm());

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ltl_logic_expr",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // ltl_logic_expr ::= ltl_logic_expr T_UNTIL_OPER ltl_logic_expr 
            {
              LTLRuleTerm RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int termright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LTLRuleTerm term = (LTLRuleTerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int term2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int term2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LTLRuleTerm term2 = (LTLRuleTerm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = LTLRuleTermFactory.getInstance().getNewLTLRuleTerm(term.getTerm() + " U " + term2.getTerm());

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ltl_logic_expr",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // propositional_logic ::= proposition_expr 
            {
              LTLRuleTerm RESULT =null;
		int propleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int propright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PropositionExpression prop = (PropositionExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	Integer propID,propID2;
	/*System.out.println(prop.toString());
	System.out.println(prop.getType());*/
	switch (prop.getType()) {
		case BOOLEAN:
			propID = this.parser.getTDCCheckerGenerator().addProposition(prop.toString());
			RESULT = LTLRuleTermFactory.getInstance().getNewLTLRuleTerm("p" + propID, "p" + propID + "");
			break;
		case ACCESS:
			propID = this.parser.getTDCCheckerGenerator().addProposition(prop.toString());
			RESULT = LTLRuleTermFactory.getInstance().getNewLTLRuleTerm("p" + propID, "p" + propID + "");
			break;
		case IDENT:
			propID = this.parser.getTDCCheckerGenerator().addProposition(prop.toString());
			RESULT = LTLRuleTermFactory.getInstance().getNewLTLRuleTerm("p" + propID, "p" + propID + "");
			break;
		case COMPOSITE:
			//System.out.print(((CompositePropositionExpression) prop).getPropExprs().get(0).toString() + " && " + ((CompositePropositionExpression) prop).getPropExprs().get(1).toString());
			propID = this.parser.getTDCCheckerGenerator().addProposition(((CompositePropositionExpression) prop).getPropExprs().get(0).toString());
			//System.out.print(" - " + propID);
			LTLRuleTerm term = LTLRuleTermFactory.getInstance().getNewLTLRuleTerm("p" + propID, "p" + propID + "");
			propID2 = this.parser.getTDCCheckerGenerator().addProposition(((CompositePropositionExpression) prop).getPropExprs().get(1).toString());
			//System.out.println(" - " + propID2);
			LTLRuleTerm term2 = LTLRuleTermFactory.getInstance().getNewLTLRuleTerm("p" + propID2, "p" + propID2 + "");
			if(((CompositePropositionExpression) prop).isConjunction()) {
				RESULT = LTLRuleTermFactory.getInstance().getNewLTLRuleTerm(term.getTerm() + " && " + term2.getTerm(), "And(" + term.getZ3Term() + "," + term2.getZ3Term() + ")");
			}else{
				RESULT = LTLRuleTermFactory.getInstance().getNewLTLRuleTerm(term.getTerm() + " || " + term2.getTerm(), "Or(" + term.getZ3Term() + "," + term2.getZ3Term() + ")");
			}
			break;
		default:
			System.out.println("NULO!!");
			RESULT = null;
			break;
	}
	//propID = TDCCheckerGenerator.getInstance().addProposition(prop);
	//TDCCheckerGenerator.getInstance().addTerm(newName);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("propositional_logic",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // propositional_logic ::= T_OPEN_PAR propositional_logic T_CLOSE_PAR 
            {
              LTLRuleTerm RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int termright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LTLRuleTerm term = (LTLRuleTerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	//LTLRuleTerm esq = new LTLRuleTerm("(");
	//LTLRuleTerm dir = new LTLRuleTerm(")");
	RESULT = LTLRuleTermFactory.getInstance().getNewLTLRuleTerm("(" + term.getTerm() + ")","(" + term.getZ3Term() + ")");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("propositional_logic",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // propositional_logic ::= T_PROP_NEG_OPER propositional_logic 
            {
              LTLRuleTerm RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LTLRuleTerm term = (LTLRuleTerm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = LTLRuleTermFactory.getInstance().getNewLTLRuleTerm("!" + term.getTerm(), "NEG(" + term.getZ3Term() + ")");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("propositional_logic",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // propositional_logic ::= propositional_logic T_BOOL_DISJ propositional_logic 
            {
              LTLRuleTerm RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int termright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LTLRuleTerm term = (LTLRuleTerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int term2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int term2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LTLRuleTerm term2 = (LTLRuleTerm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = LTLRuleTermFactory.getInstance().getNewLTLRuleTerm(term.getTerm() + " || " + term2.getTerm(), "Or(" + term.getZ3Term() + "," + term2.getZ3Term() + ")");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("propositional_logic",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // propositional_logic ::= propositional_logic T_BOOL_CONJ propositional_logic 
            {
              LTLRuleTerm RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int termright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LTLRuleTerm term = (LTLRuleTerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int term2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int term2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LTLRuleTerm term2 = (LTLRuleTerm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = LTLRuleTermFactory.getInstance().getNewLTLRuleTerm(term.getTerm() + " && " + term2.getTerm(), "And(" + term.getZ3Term() + "," + term2.getZ3Term() + ")");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("propositional_logic",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // propositional_logic ::= propositional_logic T_BOOL_IMPL propositional_logic 
            {
              LTLRuleTerm RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int termright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LTLRuleTerm term = (LTLRuleTerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int term2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int term2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LTLRuleTerm term2 = (LTLRuleTerm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = LTLRuleTermFactory.getInstance().getNewLTLRuleTerm(term.getTerm() + " -> " + term2.getTerm(), "IMPL(" + term.getZ3Term() + "," + term2.getZ3Term() + ")");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("propositional_logic",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // propositional_logic ::= propositional_logic T_BOOL_EQUI propositional_logic 
            {
              LTLRuleTerm RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int termright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LTLRuleTerm term = (LTLRuleTerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int term2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int term2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LTLRuleTerm term2 = (LTLRuleTerm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = LTLRuleTermFactory.getInstance().getNewLTLRuleTerm(term.getTerm() + " <-> " + term2.getTerm(), "EQUIV(" + term.getZ3Term() + "," + term2.getZ3Term() + ")");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("propositional_logic",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // temporal_behavior_decl ::= T_LLTLF T_OPEN_PAR T_TEXTSTR T_CLOSE_PAR 
            {
              String RESULT =null;
		int ltlformulaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ltlformularight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ltlformula = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = ltlformula.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("temporal_behavior_decl",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // temporal_behavior_decl ::= T_LTLF T_OPEN_PAR ltl_logic_expr T_CLOSE_PAR 
            {
              String RESULT =null;
		int ltlfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ltlfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LTLRuleTerm ltlf = (LTLRuleTerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = ltlf.getTerm();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("temporal_behavior_decl",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // expr_decl ::= T_INT 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = val; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_decl",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // expr_decl ::= T_IDENT 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = id; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_decl",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // expr_decl ::= expr_decl T_RSHIFT expr_decl 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "(" + id1 + " >> " + id2 + ")"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_decl",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // expr_decl ::= expr_decl T_LSHIFT expr_decl 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "(" + id1 + " << " + id2 + ")"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_decl",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // expr_decl ::= expr_decl T_DIV expr_decl 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "(" + id1 + " / " + id2 + ")"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_decl",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // expr_decl ::= expr_decl T_MULT expr_decl 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "(" + id1 + " * " + id2 + ")"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_decl",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // expr_decl ::= expr_decl T_MINUS expr_decl 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "(" + id1 + " - " + id2 + ")"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_decl",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // expr_decl ::= expr_decl T_PLUS expr_decl 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "(" + id1 + " + " + id2 + ")"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_decl",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // expr_decl ::= T_OPEN_PAR expr_decl T_CLOSE_PAR 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "(" + exp + ")"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_decl",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // assign_decl ::= T_IDENT T_IGUAL expr_decl 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_decl",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // assigns_decl ::= assign_decl T_PONTVIRG assigns_decl 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assigns_decl",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // assigns_decl ::= assign_decl T_PONTVIRG 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assigns_decl",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // assign_block_decl ::= T_ASSIGNS T_OPEN_BRACE assigns_decl T_CLOSE_BRACE 
            {
              Object RESULT =null;
		

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_block_decl",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // violation_type_decl ::= T_INFO 
            {
              String RESULT =null;
		 RESULT="info"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("violation_type_decl",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // violation_type_decl ::= T_WARNING 
            {
              String RESULT =null;
		 RESULT="warning"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("violation_type_decl",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // violation_type_decl ::= T_CRITICAL 
            {
              String RESULT =null;
		 RESULT="critical"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("violation_type_decl",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // entrypoint_decl ::= T_ADD_ENTRY_POINT T_OPEN_BRACE propositional_logic T_CLOSE_BRACE 
            {
              EntryPoint RESULT =null;
		int ltlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ltlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LTLRuleTerm ltl = (LTLRuleTerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	RESULT = new EntryPoint(ltl.getTerm(),ltl.getZ3Term());

              CUP$parser$result = parser.getSymbolFactory().newSymbol("entrypoint_decl",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // entrypoint_decl ::= T_ADD_ENTRY_POINT T_OPEN_BRACE propositional_logic T_PONTVIRG assign_block_decl T_CLOSE_BRACE 
            {
              EntryPoint RESULT =null;
		int ltlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int ltlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LTLRuleTerm ltl = (LTLRuleTerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
	RESULT = new EntryPoint(ltl.getTerm(),ltl.getZ3Term());

              CUP$parser$result = parser.getSymbolFactory().newSymbol("entrypoint_decl",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // exitpoint_decl ::= T_ADD_EXIT_POINT T_OPEN_PAR T_IDENT T_CLOSE_PAR T_OPEN_BRACE propositional_logic T_CLOSE_BRACE 
            {
              ExitPoint RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ltlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ltlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LTLRuleTerm ltl = (LTLRuleTerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	RESULT = new ExitPoint(id,ltl.getTerm(),ltl.getZ3Term());

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exitpoint_decl",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // exitpoint_decl ::= T_ADD_EXIT_POINT T_OPEN_PAR T_IDENT T_CLOSE_PAR T_OPEN_BRACE propositional_logic T_PONTVIRG assign_block_decl T_CLOSE_BRACE 
            {
              ExitPoint RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int ltlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int ltlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LTLRuleTerm ltl = (LTLRuleTerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
	RESULT = new ExitPoint(id,ltl.getTerm(), ltl.getZ3Term());

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exitpoint_decl",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // violation_decl ::= T_ADD_PROPERTY T_OPEN_PAR violation_type_decl T_CLOSE_PAR T_IDENT T_OPEN_BRACE temporal_behavior_decl T_CLOSE_BRACE 
            {
              Violation RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ltlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ltlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ltl = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Violation(id, type.toUpperCase(), ltl);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("violation_decl",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // violation_decl ::= T_ADD_PROPERTY T_OPEN_PAR violation_type_decl T_CLOSE_PAR T_OPEN_BRACE temporal_behavior_decl T_CLOSE_BRACE 
            {
              Violation RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ltlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ltlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ltl = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Violation(type.toUpperCase(), ltl);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("violation_decl",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // behavior_decl ::= T_ADD_BEHAVIOR T_OPEN_PAR T_IDENT T_CLOSE_PAR T_IDENT T_OPEN_BRACE temporal_behavior_decl T_CLOSE_BRACE 
            {
              Behavior RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ltlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ltlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ltl = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Behavior(id, type.toUpperCase(), ltl);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("behavior_decl",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // behavior_decl ::= T_ADD_BEHAVIOR T_OPEN_PAR T_IDENT T_CLOSE_PAR T_OPEN_BRACE temporal_behavior_decl T_CLOSE_BRACE 
            {
              Behavior RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ltlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ltlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ltl = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Behavior(type.toUpperCase(), ltl);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("behavior_decl",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // states_decl ::= state_declaration states_decl 
            {
              HashMap<String,IDevCState> RESULT =null;
		int sdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DevCState sd = (DevCState)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int statesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int statesright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		HashMap<String,IDevCState> states = (HashMap<String,IDevCState>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	if (states.containsKey(sd.getName())){
		Logger.getGlobal().log(Level.SEVERE, " Duplicated State: \"" + sd.getName() + "\"");
		throw new Exception(" Duplicated State: \"" + sd.getName() + "\"");
	}else{
		states.put(sd.getName(),sd);
		RESULT=states;
	}	

              CUP$parser$result = parser.getSymbolFactory().newSymbol("states_decl",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // states_decl ::= state_declaration 
            {
              HashMap<String,IDevCState> RESULT =null;
		int sdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DevCState sd = (DevCState)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	HashMap<String, IDevCState> states = new HashMap<String, IDevCState>();
	states.put(sd.getName(),sd);
	RESULT=states;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("states_decl",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ortho_region_decl ::= T_ORTHO_REGION T_IDENT T_OPEN_BRACE states_decl T_CLOSE_BRACE 
            {
              OrthoRegion RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int statesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int statesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		HashMap<String,IDevCState> states = (HashMap<String,IDevCState>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	OrthoRegion region = new OrthoRegion(name);
	region.addStates(states);
	RESULT=region;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ortho_region_decl",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // state_body ::= ortho_region_decl state_body 
            {
              DevCState RESULT =null;
		int ordleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ordright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		OrthoRegion ord = (OrthoRegion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DevCState ds = (DevCState)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	ds.addOrthoRegion(ord);
	RESULT = ds;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("state_body",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // state_body ::= entrypoint_decl state_body 
            {
              DevCState RESULT =null;
		int entryleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int entryright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		EntryPoint entry = (EntryPoint)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DevCState ds = (DevCState)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	ds.addEntryPoint(entry);
	RESULT = ds;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("state_body",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // state_body ::= exitpoint_decl state_body 
            {
              DevCState RESULT =null;
		int exitleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exitright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExitPoint exit = (ExitPoint)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DevCState ds = (DevCState)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	ds.addExitPoint(exit);
	RESULT = ds;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("state_body",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // state_body ::= violation_decl state_body 
            {
              DevCState RESULT =null;
		int ltlrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ltlrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Violation ltlr = (Violation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DevCState ds = (DevCState)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	ds.addViolation(ltlr);
	RESULT = ds;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("state_body",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // state_body ::= behavior_decl state_body 
            {
              DevCState RESULT =null;
		int ltlrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ltlrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Behavior ltlr = (Behavior)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DevCState ds = (DevCState)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	ds.addBehavior(ltlr);
	RESULT = ds;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("state_body",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // state_body ::= state_declaration state_body 
            {
              DevCState RESULT =null;
		int sdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DevCState sd = (DevCState)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DevCState ds = (DevCState)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	ds.addSon(sd);
	RESULT = ds;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("state_body",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // state_body ::= ortho_region_decl 
            {
              DevCState RESULT =null;
		int ordleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ordright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		OrthoRegion ord = (OrthoRegion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	DevCState ds = new DevCState();
	ds.addOrthoRegion(ord);
	RESULT = ds;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("state_body",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // state_body ::= entrypoint_decl 
            {
              DevCState RESULT =null;
		int ltlrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ltlrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		EntryPoint ltlr = (EntryPoint)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	DevCState ds = new DevCState();
	ds.addEntryPoint(ltlr);
	RESULT = ds;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("state_body",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // state_body ::= exitpoint_decl 
            {
              DevCState RESULT =null;
		int ltlrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ltlrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExitPoint ltlr = (ExitPoint)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	DevCState ds = new DevCState();
	ds.addExitPoint(ltlr);
	RESULT = ds;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("state_body",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // state_body ::= violation_decl 
            {
              DevCState RESULT =null;
		int ltlrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ltlrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Violation ltlr = (Violation)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	DevCState ds = new DevCState();
	ds.addViolation(ltlr);
	RESULT = ds;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("state_body",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // state_body ::= behavior_decl 
            {
              DevCState RESULT =null;
		int ltlrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ltlrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Behavior ltlr = (Behavior)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	DevCState ds = new DevCState();
	ds.addBehavior(ltlr);
	RESULT = ds;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("state_body",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // state_body ::= state_declaration 
            {
              DevCState RESULT =null;
		int sdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DevCState sd = (DevCState)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	DevCState ds = new DevCState();
	ds.addSon(sd);
	RESULT = ds;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("state_body",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // state_type ::= T_INITIAL_STATE 
            {
              StateType RESULT =null;
		 RESULT=StateType.INITIALSTATE; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("state_type",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // state_type ::= T_ORTHO_STATE 
            {
              StateType RESULT =null;
		 RESULT=StateType.ORTHOSTATE; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("state_type",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // state_type ::= T_STATE 
            {
              StateType RESULT =null;
		 RESULT=StateType.STATE; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("state_type",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // state_declaration ::= error 
            {
              DevCState RESULT =null;
		int aaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object aa = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.err.println("Error on State Declaration! (Line: " + Lex.currentLine + ")");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("state_declaration",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // state_declaration ::= state_type T_IDENT T_OPEN_BRACE state_body T_CLOSE_BRACE 
            {
              DevCState RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		StateType type = (StateType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DevCState ds = (DevCState)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	ds.setName(id);
	ds.setType(type);
	RESULT = ds;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("state_declaration",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // global_state_body ::= ortho_region_decl global_state_body 
            {
              DevCState RESULT =null;
		int ordleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ordright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		OrthoRegion ord = (OrthoRegion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DevCState ds = (DevCState)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	ds.addOrthoRegion(ord);
	RESULT = ds;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("global_state_body",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // global_state_body ::= state_declaration global_state_body 
            {
              DevCState RESULT =null;
		int sdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DevCState sd = (DevCState)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DevCState ds = (DevCState)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	ds.addSon(sd);
	RESULT = ds;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("global_state_body",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // global_state_body ::= behavior_decl global_state_body 
            {
              DevCState RESULT =null;
		int ltlrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ltlrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Behavior ltlr = (Behavior)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DevCState ds = (DevCState)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	ds.addBehavior(ltlr);
	RESULT = ds;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("global_state_body",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // global_state_body ::= violation_decl global_state_body 
            {
              DevCState RESULT =null;
		int ltlrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ltlrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Violation ltlr = (Violation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DevCState ds = (DevCState)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	ds.addViolation(ltlr);
	RESULT = ds;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("global_state_body",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // global_state_body ::= state_declaration 
            {
              DevCState RESULT =null;
		int sdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DevCState sd = (DevCState)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	DevCState ds = new DevCState();
	ds.addSon(sd);
	RESULT = ds;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("global_state_body",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // global_state_body ::= ortho_region_decl 
            {
              DevCState RESULT =null;
		int ordleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ordright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		OrthoRegion ord = (OrthoRegion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	DevCState ds = new DevCState();
	ds.addOrthoRegion(ord);
	RESULT = ds;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("global_state_body",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // global_state_body ::= behavior_decl 
            {
              DevCState RESULT =null;
		int ltlrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ltlrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Behavior ltlr = (Behavior)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	DevCState ds = new DevCState();
	ds.addBehavior(ltlr);
	RESULT = ds;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("global_state_body",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // global_state_body ::= violation_decl 
            {
              DevCState RESULT =null;
		int ltlrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ltlrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Violation ltlr = (Violation)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	DevCState ds = new DevCState();
	ds.addViolation(ltlr);
	RESULT = ds;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("global_state_body",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // global_state_definition ::= T_GLOBAL_STATE T_OPEN_BRACE global_state_body T_CLOSE_BRACE 
            {
              DevCState RESULT =null;
		int dsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DevCState ds = (DevCState)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	ds.setName("Global_State");
	ds.setType(StateType.GLOBALSTATE);
	RESULT = ds;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("global_state_definition",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // rw ::= T_READWRITE 
            {
              AccessType RESULT =null;
		RESULT = AccessType.READ_WRITE; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rw",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // rw ::= T_WRITE 
            {
              AccessType RESULT =null;
		RESULT = AccessType.WRITE; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rw",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // rw ::= T_READ 
            {
              AccessType RESULT =null;
		 RESULT = AccessType.READ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rw",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // field_decl ::= error 
            {
              Field RESULT =null;
		System.err.println("Error @ field Declr (Line: " + Lex.currentLine + ")");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("field_decl",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // field_decl ::= T_IDENT T_OPEN_BRACE fields_decl T_CLOSE_BRACE 
            {
              Field RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int fieldsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fieldsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		HashMap<String,Field> fields = (HashMap<String,Field>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	Field field = new Field(name, "0", AccessType.VOID, FieldType.REGULAR);
	field.setFields(fields);
	RESULT = field;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("field_decl",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // field_decl ::= T_RESERVED T_OPEN_BRACKET T_INT T_CLOSE_BRACKET 
            {
              Field RESULT =null;
		int seleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int seright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String se = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	RESULT = new Field("reserved_", "0", AccessType.VOID, FieldType.RESERVED, se, se);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("field_decl",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // field_decl ::= T_RESERVED T_OPEN_BRACKET T_INT T_DOISPONTOS T_INT T_CLOSE_BRACKET 
            {
              Field RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String end = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	RESULT = new Field("reserved_", "0", AccessType.VOID, FieldType.RESERVED, start, end);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("field_decl",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // field_decl ::= rw T_IDENT T_OPEN_BRACKET T_INT T_DOISPONTOS T_INT T_CLOSE_BRACKET 
            {
              Field RESULT =null;
		int accesstypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int accesstyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		AccessType accesstype = (AccessType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String end = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	RESULT = new Field(name, "0", accesstype, FieldType.REGULAR, start, end);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("field_decl",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // field_decl ::= rw T_IDENT T_OPEN_BRACKET T_INT T_CLOSE_BRACKET 
            {
              Field RESULT =null;
		int accesstypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int accesstyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		AccessType accesstype = (AccessType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int seleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int seright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String se = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	RESULT = new Field(name, "0", accesstype, FieldType.REGULAR, se, se);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("field_decl",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // fields_decl ::= field_decl T_PONTVIRG fields_decl 
            {
              HashMap<String,Field> RESULT =null;
		int fieldleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fieldright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Field field = (Field)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fieldsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fieldsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		HashMap<String,Field> fields = (HashMap<String,Field>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	fields.put(field.getName(),field);
	RESULT = fields;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fields_decl",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // fields_decl ::= field_decl T_PONTVIRG 
            {
              HashMap<String,Field> RESULT =null;
		int fieldleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fieldright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Field field = (Field)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		

	HashMap<String, Field> fields = new HashMap<String, Field>(); 
	fields.put(field.getName(),field);
	RESULT = fields;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fields_decl",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // reg_decl ::= error 
            {
              Register RESULT =null;
		System.err.println("Error @ Register Definition! (Line: " + Lex.currentLine + ")");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reg_decl",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // reg_decl ::= T_DC_REG T_IDENT T_OPEN_PAR T_INT T_CLOSE_PAR T_ALIAS T_IDENT T_IGUAL T_IDENT T_PONTVIRG 
            {
              Register RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int addrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int addrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String addr = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int aliasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aliasright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String alias = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int formatleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int formatright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String format = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	RESULT = new Register(name, alias, addr, AccessType.VOID, format);
	//RESULT = new Register(ident,new RegisterFormat(fmt),AccessType.READ_WRITE); 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("reg_decl",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // reg_decl ::= T_DC_REG T_IDENT T_OPEN_PAR T_INT T_CLOSE_PAR T_IGUAL T_IDENT T_PONTVIRG 
            {
              Register RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int addrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int addrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String addr = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int formatleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int formatright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String format = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		RESULT = new Register(name, name, addr, AccessType.VOID, format);
	//RESULT = new Register(ident,new RegisterFormat(fmt),AccessType.READ_WRITE); 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("reg_decl",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // reg_decl ::= T_DC_REG T_IDENT T_OPEN_PAR T_INT T_CLOSE_PAR T_ALIAS T_IDENT T_OPEN_BRACE fields_decl T_CLOSE_BRACE 
            {
              Register RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int addrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int addrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String addr = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int aliasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aliasright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String alias = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int fieldsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fieldsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		HashMap<String,Field> fields = (HashMap<String,Field>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		

	RESULT = new Register(name, alias, addr, AccessType.VOID, fields);
	//RESULT = new Register(ident,new RegisterFormat(fmt),AccessType.READ_WRITE); 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("reg_decl",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // reg_decl ::= T_DC_REG T_IDENT T_OPEN_PAR T_INT T_CLOSE_PAR T_OPEN_BRACE fields_decl T_CLOSE_BRACE 
            {
              Register RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int addrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int addrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String addr = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int fieldsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fieldsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		HashMap<String,Field> fields = (HashMap<String,Field>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	RESULT = new Register(name, name, addr, AccessType.VOID, fields);
	//RESULT = new Register(ident,new RegisterFormat(fmt),AccessType.READ_WRITE); 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("reg_decl",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // mem_definition ::= error 
            {
              Object RESULT =null;
		System.err.println("Error @ Memory Definition! (Line: " + Lex.currentLine + ")");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mem_definition",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // mem_definition ::= T_EXTERNAL T_MEMORY T_IDENT T_OPEN_PAR T_INT T_VIRG T_INT T_CLOSE_PAR T_ALIAS T_IDENT 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String size = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aliasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aliasright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String alias = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("External Memory[" + alias + "]: " + id + ", Starting @ " + start + " with size: " + size); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mem_definition",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // mem_definition ::= T_EXTERNAL T_MEMORY T_IDENT T_OPEN_PAR T_INT T_VIRG T_INT T_CLOSE_PAR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String size = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("External Memory: " + id + ", Starting @ " + start + " with size: " + size); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mem_definition",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // mem_definition ::= T_INTERNAL T_MEMORY T_IDENT T_OPEN_PAR T_INT T_VIRG T_INT T_CLOSE_PAR T_ALIAS T_IDENT 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String size = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aliasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aliasright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String alias = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Internal Memory[" + alias + "]: " + id + ", Starting @ " + start + " with size: " + size); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mem_definition",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // mem_definition ::= T_INTERNAL T_MEMORY T_IDENT T_OPEN_PAR T_INT T_VIRG T_INT T_CLOSE_PAR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String size = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("Internal Memory: " + id + ", Starting @ " + start + " with size: " + size); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mem_definition",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // sto_definition ::= error 
            {
              Register RESULT =null;
		System.err.println("Error @ Storage Definition! (Line: " + Lex.currentLine + ")");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sto_definition",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // sto_definition ::= T_EXTERNAL reg_decl 
            {
              Register RESULT =null;
		int regleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int regright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Register reg = (Register)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = reg;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sto_definition",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // sto_definition ::= T_INTERNAL T_IDENT reg_decl 
            {
              Register RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int regleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int regright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Register reg = (Register)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = reg; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sto_definition",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // context_definition ::= T_VAR T_IDENT T_IGUAL T_INT T_PONTVIRG 
            {
              Variable RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Variable(id,val); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("context_definition",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // context_definition ::= T_VAR T_IDENT T_PONTVIRG 
            {
              Variable RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Variable(id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("context_definition",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // delay_type ::= T_PS 
            {
              DelayType RESULT =null;
		 RESULT = DelayType.PS;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("delay_type",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // delay_type ::= T_NS 
            {
              DelayType RESULT =null;
		 RESULT = DelayType.NS;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("delay_type",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // delay_type ::= T_US 
            {
              DelayType RESULT =null;
		 RESULT = DelayType.US;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("delay_type",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // delay_type ::= T_MS 
            {
              DelayType RESULT =null;
		 RESULT = DelayType.MS;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("delay_type",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // delay_type ::= T_SEC 
            {
              DelayType RESULT =null;
		 RESULT = DelayType.S;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("delay_type",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // delay_definition ::= T_MAX_DELAY T_OPEN_PAR T_INT T_VIRG delay_type T_CLOSE_PAR 
            {
              Delay RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DelayType dtype = (DelayType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Delay(val,dtype,DelayLimitType.MAX);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("delay_definition",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // delay_definition ::= T_MIN_DELAY T_OPEN_PAR T_INT T_VIRG delay_type T_CLOSE_PAR 
            {
              Delay RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DelayType dtype = (DelayType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Delay(val,dtype,DelayLimitType.MIN);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("delay_definition",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // bits ::= error 
            {
              String RESULT =null;
		 System.err.println("Mask Format Syntax Error: (Line: " + Lex.currentLine + ")"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bits",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // bits ::= T_MASKREP 
            {
              String RESULT =null;
		int mascleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mascright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String masc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = masc; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bits",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // format_definition ::= T_DC_FORMAT T_IDENT T_OPEN_BRACE fields_decl T_CLOSE_BRACE 
            {
              RegisterFormat RESULT =null;
		int nameileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String namei = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int fieldsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fieldsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		HashMap<String,Field> fields = (HashMap<String,Field>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	RESULT = new RegisterFormat(namei, fields);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("format_definition",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // pattern_definition ::= T_PATTERN T_IDENT T_IGUAL T_MASK T_OPEN_PAR bits T_CLOSE_PAR 
            {
              Pattern RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bitleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bitright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String bit = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	RESULT = new Pattern(name,bit,true);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("pattern_definition",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // pattern_definition ::= T_PATTERN T_IDENT T_IGUAL T_INT 
            {
              Pattern RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = new Pattern(name,val,false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("pattern_definition",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // devc_obj_def ::= error 
            {
              TDCCheckerGenerator RESULT =null;
		System.err.println("Error on Object Definitions! (Line: " + Lex.currentLine + ")");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("devc_obj_def",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // devc_obj_def ::= global_state_definition 
            {
              TDCCheckerGenerator RESULT =null;
		int state_defleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int state_defright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DevCState state_def = (DevCState)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	TDCCheckerGenerator def_aut = this.parser.getTDCCheckerGenerator();//TDCCheckerGenerator.getInstance();
	def_aut.setGlobalState(state_def);
	RESULT = def_aut;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("devc_obj_def",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // devc_obj_def ::= context_definition devc_obj_def 
            {
              TDCCheckerGenerator RESULT =null;
		int ctxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ctxright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Variable ctx = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int def_autleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int def_autright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TDCCheckerGenerator def_aut = (TDCCheckerGenerator)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	def_aut.addVariable(ctx);
	RESULT = def_aut;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("devc_obj_def",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // devc_obj_def ::= mem_definition T_PONTVIRG devc_obj_def 
            {
              TDCCheckerGenerator RESULT =null;
		int def_autleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int def_autright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TDCCheckerGenerator def_aut = (TDCCheckerGenerator)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	//def_aut.addRegister(sto);
	RESULT = def_aut;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("devc_obj_def",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // devc_obj_def ::= sto_definition devc_obj_def 
            {
              TDCCheckerGenerator RESULT =null;
		int stoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int storight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Register sto = (Register)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int def_autleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int def_autright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TDCCheckerGenerator def_aut = (TDCCheckerGenerator)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	def_aut.addRegister(sto);
	RESULT = def_aut;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("devc_obj_def",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // devc_obj_def ::= pattern_definition T_PONTVIRG devc_obj_def 
            {
              TDCCheckerGenerator RESULT =null;
		int patternleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int patternright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Pattern pattern = (Pattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int def_autleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int def_autright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TDCCheckerGenerator def_aut = (TDCCheckerGenerator)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	def_aut.addPattern(pattern);
	RESULT = def_aut;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("devc_obj_def",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // devc_obj_def ::= format_definition devc_obj_def 
            {
              TDCCheckerGenerator RESULT =null;
		int fmtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fmtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RegisterFormat fmt = (RegisterFormat)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int def_autleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int def_autright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TDCCheckerGenerator def_aut = (TDCCheckerGenerator)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	def_aut.addFormat(fmt);
	RESULT = def_aut;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("devc_obj_def",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // tdevcspec ::= error 
            {
              TDCCheckerGenerator RESULT =null;
		System.err.println("Error on Start Declaration! (Line: " + Lex.currentLine + ")");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tdevcspec",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // tdevcspec ::= T_DEVICE T_OPEN_PAR T_IDENT T_CLOSE_PAR T_OPEN_BRACE devc_obj_def T_CLOSE_BRACE 
            {
              TDCCheckerGenerator RESULT =null;
		int pjNameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pjNameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String pjName = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int def1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int def1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TDCCheckerGenerator def1 = (TDCCheckerGenerator)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	def1.setProjectName(pjName);
	RESULT = def1;
	////this.parser.setTDCCheckerGenerator(def1);
	//def1.runCheckerGeneration(parser.initialTime, pjName, parser.baseAddress, parser.appName, parser.absoluteDir, parser.kernelImageDir, parser.codeType);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tdevcspec",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // tdevtimport ::= T_IMPORT T_IDENT T_PONTVIRG 
            {
              String RESULT =null;
		int impleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int impright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String imp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = imp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tdevtimport",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // tdevtimport ::= tdevtimport T_IMPORT T_IDENT T_PONTVIRG 
            {
              String RESULT =null;
		int imp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int imp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String imp2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int impleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int impright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String imp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = imp2 + "\n" + imp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tdevtimport",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // input ::= tdevcspec 
            {
              Object RESULT =null;
		int def1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int def1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TDCCheckerGenerator def1 = (TDCCheckerGenerator)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
 	this.parser.setTDCCheckerGenerator(def1);
 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("input",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= input EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // input ::= tdevtimport tdevcspec 
            {
              Object RESULT =null;
		int impleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int impright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String imp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int def1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int def1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TDCCheckerGenerator def1 = (TDCCheckerGenerator)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
 	this.parser.setTDCCheckerGenerator(def1);
 	/*System.out.println("aaaaaaaaaa");
	def1.checkSemantics();*/ //AQUI!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("input",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

