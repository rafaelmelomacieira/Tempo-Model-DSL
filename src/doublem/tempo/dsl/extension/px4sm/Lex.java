/* The following code was generated by JFlex 1.4.3 on 6/9/16 4:26 PM */

package doublem.tempo.dsl.extension.px4sm;

import java_cup.runtime.*;
import java.util.HashSet;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 6/9/16 4:26 PM from the specification file
 * <tt>tdevc_lex_java.y</tt>
 */
public class Lex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\15\1\14\2\0\1\12\22\0\1\11\1\71\1\17\3\0"+
    "\1\76\1\0\1\20\1\21\1\16\1\101\1\52\1\75\1\10\1\13"+
    "\1\3\1\7\10\2\1\23\1\22\1\72\1\35\1\73\2\0\1\56"+
    "\2\5\1\57\1\55\1\5\2\1\1\61\3\1\1\64\1\66\1\1"+
    "\1\67\1\1\1\54\1\63\1\62\1\65\1\74\1\60\3\1\1\33"+
    "\1\0\1\34\1\0\1\103\1\0\1\37\1\6\1\30\1\24\1\25"+
    "\1\42\1\70\1\102\1\27\1\1\1\41\1\50\1\36\1\47\1\43"+
    "\1\46\1\1\1\44\1\40\1\45\1\104\1\26\1\53\1\4\1\51"+
    "\1\1\1\31\1\77\1\32\1\100\55\0\1\100\uff53\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\2\3\1\2\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\0\1\11\1\12\1\13\1\14\5\2"+
    "\1\15\1\16\1\17\1\20\1\21\11\2\1\22\2\2"+
    "\1\23\1\24\1\2\1\25\3\2\1\26\1\27\1\30"+
    "\1\31\1\32\2\0\1\26\1\33\1\0\1\1\1\3"+
    "\2\0\1\34\1\35\6\2\1\36\1\37\22\2\1\40"+
    "\1\2\1\41\1\42\1\43\1\44\1\2\1\45\1\46"+
    "\1\47\1\50\1\0\1\51\1\52\1\53\1\54\1\55"+
    "\1\3\2\5\1\0\2\2\1\56\34\2\1\57\1\5"+
    "\4\2\1\60\5\2\1\61\11\2\1\62\2\2\1\63"+
    "\2\2\1\64\2\2\1\65\20\2\1\66\1\67\1\70"+
    "\7\2\1\71\1\72\1\2\1\73\1\2\1\74\3\2"+
    "\1\75\7\2\1\76\22\2\1\77\4\2\1\100\1\2"+
    "\1\101\1\2\1\102\1\2\1\103\1\104\1\105\1\106"+
    "\6\2\1\107\1\110\20\2\1\111\4\2\1\112\2\2"+
    "\1\113\1\114\1\2\1\115\1\116\1\117\1\2\1\120"+
    "\1\121";

  private static int [] zzUnpackAction() {
    int [] result = new int[289];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\105\0\212\0\317\0\u0114\0\u0159\0\u019e\0\u01e3"+
    "\0\u0228\0\u026d\0\u02b2\0\u02f7\0\u033c\0\u02b2\0\u02b2\0\u02b2"+
    "\0\u0381\0\u03c6\0\u040b\0\u0450\0\u0495\0\u02b2\0\u02b2\0\u04da"+
    "\0\u02b2\0\u051f\0\u0564\0\u05a9\0\u05ee\0\u0633\0\u0678\0\u06bd"+
    "\0\u0702\0\u0747\0\u078c\0\u02b2\0\u07d1\0\u0816\0\u085b\0\105"+
    "\0\u08a0\0\u08e5\0\u092a\0\u096f\0\u09b4\0\u09f9\0\u0a3e\0\u0a83"+
    "\0\105\0\u0ac8\0\u0b0d\0\u0b52\0\u02b2\0\u02b2\0\u0b97\0\u019e"+
    "\0\u0114\0\u0bdc\0\u0c21\0\u02f7\0\u02b2\0\u0c66\0\u0cab\0\u0cf0"+
    "\0\u0d35\0\u0d7a\0\u0dbf\0\u02b2\0\u02b2\0\u0e04\0\u0e49\0\u0e8e"+
    "\0\u0ed3\0\u0f18\0\u0f5d\0\u0fa2\0\u0fe7\0\u102c\0\u1071\0\u10b6"+
    "\0\u10fb\0\u1140\0\u1185\0\u11ca\0\u120f\0\u1254\0\u1299\0\105"+
    "\0\u12de\0\105\0\105\0\105\0\105\0\u1323\0\u02b2\0\u02b2"+
    "\0\u02b2\0\u02b2\0\u1368\0\u02b2\0\u02b2\0\u02b2\0\u02b2\0\u02b2"+
    "\0\u0b97\0\u0bdc\0\u13ad\0\u13f2\0\u1437\0\u147c\0\105\0\u14c1"+
    "\0\u1506\0\u154b\0\u1590\0\u15d5\0\u161a\0\u165f\0\u16a4\0\u16e9"+
    "\0\u172e\0\u1773\0\u17b8\0\u17fd\0\u1842\0\u1887\0\u18cc\0\u1911"+
    "\0\u1956\0\u199b\0\u19e0\0\u1a25\0\u1a6a\0\u1aaf\0\u1af4\0\u1b39"+
    "\0\u1b7e\0\u1bc3\0\u1c08\0\u02b2\0\u02b2\0\u1c4d\0\u1c92\0\u1cd7"+
    "\0\u1d1c\0\105\0\u1d61\0\u1da6\0\u1deb\0\u1e30\0\u1e75\0\105"+
    "\0\u1eba\0\u1eff\0\u1f44\0\u1f89\0\u1fce\0\u2013\0\u2058\0\u209d"+
    "\0\u20e2\0\105\0\u2127\0\u216c\0\105\0\u21b1\0\u21f6\0\105"+
    "\0\u223b\0\u2280\0\105\0\u22c5\0\u230a\0\u234f\0\u2394\0\u23d9"+
    "\0\u241e\0\u2463\0\u24a8\0\u24ed\0\u2532\0\u2577\0\u25bc\0\u2601"+
    "\0\u2646\0\u268b\0\u26d0\0\105\0\105\0\105\0\u2715\0\u275a"+
    "\0\u279f\0\u27e4\0\u2829\0\u286e\0\u28b3\0\105\0\105\0\u28f8"+
    "\0\105\0\u293d\0\105\0\u2982\0\u29c7\0\u2a0c\0\105\0\u2a51"+
    "\0\u2a96\0\u2adb\0\u2b20\0\u2b65\0\u2baa\0\u2bef\0\105\0\u2c34"+
    "\0\u2c79\0\u2cbe\0\u2d03\0\u2d48\0\u2d8d\0\u2dd2\0\u2e17\0\u2e5c"+
    "\0\u2ea1\0\u2ee6\0\u2f2b\0\u2f70\0\u2fb5\0\u2ffa\0\u303f\0\u3084"+
    "\0\u30c9\0\105\0\u310e\0\u3153\0\u3198\0\u31dd\0\105\0\u3222"+
    "\0\105\0\u3267\0\105\0\u32ac\0\105\0\105\0\105\0\105"+
    "\0\u32f1\0\u3336\0\u337b\0\u33c0\0\u3405\0\u344a\0\105\0\105"+
    "\0\u348f\0\u34d4\0\u3519\0\u355e\0\u35a3\0\u35e8\0\u362d\0\u3672"+
    "\0\u36b7\0\u36fc\0\u3741\0\u3786\0\u37cb\0\u3810\0\u3855\0\u389a"+
    "\0\105\0\u38df\0\u3924\0\u3969\0\u39ae\0\105\0\u39f3\0\u3a38"+
    "\0\105\0\105\0\u3a7d\0\105\0\105\0\105\0\u3ac2\0\105"+
    "\0\105";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[289];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\2\1\3\1\4\2\2\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\11\1\10\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\2\1\36\1\37\1\40\1\41\1\42\1\2\1\43"+
    "\1\2\1\44\1\45\1\46\3\2\1\47\2\2\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\1\64\1\65\1\66\3\2\1\0"+
    "\7\2\14\0\5\2\5\0\14\2\1\0\16\2\3\0"+
    "\1\2\5\0\3\2\2\0\2\3\3\0\1\3\77\0"+
    "\1\3\1\6\1\67\2\0\1\6\1\70\75\0\2\2"+
    "\1\71\3\2\1\71\14\0\5\2\5\0\14\2\1\0"+
    "\16\2\3\0\1\2\5\0\3\2\2\0\1\3\1\6"+
    "\3\0\1\6\1\70\77\0\1\70\3\0\2\70\105\0"+
    "\1\10\3\0\1\10\101\0\1\11\1\0\1\11\103\0"+
    "\1\72\2\0\1\73\173\0\14\14\1\0\2\14\1\74"+
    "\65\14\21\0\1\75\64\0\7\2\14\0\1\2\1\76"+
    "\3\2\5\0\14\2\1\0\16\2\3\0\1\2\5\0"+
    "\3\2\1\0\3\2\1\77\3\2\14\0\5\2\5\0"+
    "\14\2\1\0\16\2\3\0\1\2\5\0\3\2\1\0"+
    "\7\2\14\0\5\2\5\0\1\2\1\100\12\2\1\0"+
    "\16\2\3\0\1\2\5\0\3\2\1\0\7\2\14\0"+
    "\5\2\5\0\1\101\10\2\1\102\2\2\1\0\16\2"+
    "\3\0\1\2\5\0\3\2\1\0\7\2\14\0\5\2"+
    "\5\0\6\2\1\103\5\2\1\0\16\2\3\0\1\2"+
    "\5\0\3\2\34\0\1\104\105\0\1\105\50\0\7\2"+
    "\14\0\1\2\1\106\1\2\1\107\1\2\5\0\1\2"+
    "\1\110\12\2\1\0\16\2\3\0\1\2\5\0\3\2"+
    "\1\0\7\2\14\0\1\111\4\2\5\0\2\2\1\112"+
    "\7\2\1\113\1\2\1\0\16\2\3\0\1\2\5\0"+
    "\3\2\1\0\7\2\14\0\5\2\5\0\7\2\1\114"+
    "\4\2\1\0\16\2\3\0\1\2\5\0\3\2\1\0"+
    "\7\2\14\0\5\2\5\0\1\2\1\115\3\2\1\116"+
    "\6\2\1\0\16\2\3\0\1\2\5\0\3\2\1\0"+
    "\7\2\14\0\5\2\5\0\6\2\1\117\5\2\1\0"+
    "\16\2\3\0\1\2\5\0\3\2\1\0\7\2\14\0"+
    "\1\2\1\120\3\2\5\0\14\2\1\0\16\2\3\0"+
    "\1\2\5\0\3\2\1\0\7\2\14\0\5\2\5\0"+
    "\6\2\1\121\5\2\1\0\16\2\3\0\1\2\5\0"+
    "\3\2\1\0\7\2\14\0\5\2\5\0\1\2\1\122"+
    "\12\2\1\0\16\2\3\0\1\2\5\0\3\2\1\0"+
    "\7\2\14\0\3\2\1\123\1\2\5\0\7\2\1\124"+
    "\4\2\1\0\16\2\3\0\1\2\5\0\3\2\1\0"+
    "\7\2\14\0\5\2\5\0\1\2\1\125\4\2\1\126"+
    "\5\2\1\0\16\2\3\0\1\2\5\0\3\2\1\0"+
    "\7\2\14\0\5\2\5\0\14\2\1\0\2\2\1\127"+
    "\2\2\1\130\10\2\3\0\1\2\5\0\3\2\1\0"+
    "\7\2\14\0\5\2\5\0\14\2\1\0\1\2\1\131"+
    "\14\2\3\0\1\2\5\0\3\2\1\0\7\2\14\0"+
    "\5\2\5\0\14\2\1\0\10\2\1\132\5\2\3\0"+
    "\1\2\5\0\3\2\1\0\7\2\14\0\5\2\5\0"+
    "\14\2\1\0\10\2\1\133\5\2\3\0\1\2\5\0"+
    "\3\2\1\0\7\2\14\0\5\2\5\0\14\2\1\0"+
    "\10\2\1\134\5\2\3\0\1\2\5\0\3\2\1\0"+
    "\7\2\14\0\5\2\5\0\14\2\1\0\10\2\1\135"+
    "\5\2\3\0\1\2\5\0\3\2\1\0\7\2\14\0"+
    "\5\2\5\0\12\2\1\136\1\2\1\0\16\2\3\0"+
    "\1\2\5\0\3\2\35\0\1\137\104\0\1\140\34\0"+
    "\1\141\1\142\1\0\1\143\44\0\1\144\35\0\1\145"+
    "\104\0\1\146\107\0\1\147\105\0\1\150\7\0\2\151"+
    "\1\0\3\151\14\0\2\151\2\0\1\151\6\0\1\151"+
    "\2\0\1\151\12\0\3\151\25\0\12\72\1\152\1\72"+
    "\1\153\1\152\67\72\13\73\1\0\2\73\1\154\66\73"+
    "\1\0\7\2\14\0\2\2\1\155\2\2\5\0\14\2"+
    "\1\0\16\2\3\0\1\2\5\0\3\2\1\0\7\2"+
    "\14\0\5\2\5\0\7\2\1\156\4\2\1\0\16\2"+
    "\3\0\1\2\5\0\3\2\1\0\7\2\14\0\5\2"+
    "\5\0\6\2\1\157\5\2\1\0\16\2\3\0\1\2"+
    "\5\0\3\2\1\0\7\2\14\0\5\2\5\0\10\2"+
    "\1\160\3\2\1\0\16\2\3\0\1\2\5\0\3\2"+
    "\1\0\7\2\14\0\3\2\1\161\1\2\5\0\4\2"+
    "\1\162\2\2\1\163\4\2\1\0\16\2\3\0\1\2"+
    "\5\0\3\2\1\0\7\2\14\0\3\2\1\164\1\2"+
    "\5\0\14\2\1\0\16\2\3\0\1\2\5\0\3\2"+
    "\1\0\7\2\14\0\5\2\5\0\1\165\13\2\1\0"+
    "\16\2\3\0\1\2\5\0\3\2\1\0\7\2\14\0"+
    "\5\2\5\0\11\2\1\166\2\2\1\0\16\2\3\0"+
    "\1\2\5\0\3\2\1\0\3\2\1\167\3\2\14\0"+
    "\5\2\5\0\2\2\1\170\11\2\1\0\16\2\3\0"+
    "\1\2\5\0\3\2\1\0\7\2\14\0\1\171\4\2"+
    "\5\0\14\2\1\0\16\2\3\0\1\2\5\0\3\2"+
    "\1\0\7\2\14\0\5\2\5\0\2\2\1\172\11\2"+
    "\1\0\16\2\3\0\1\2\5\0\3\2\1\0\7\2"+
    "\14\0\3\2\1\173\1\2\5\0\14\2\1\0\16\2"+
    "\3\0\1\2\5\0\3\2\1\0\7\2\14\0\5\2"+
    "\5\0\1\2\1\174\12\2\1\0\16\2\3\0\1\2"+
    "\5\0\3\2\1\0\7\2\14\0\5\2\5\0\12\2"+
    "\1\175\1\2\1\0\16\2\3\0\1\2\5\0\3\2"+
    "\1\0\7\2\14\0\5\2\5\0\6\2\1\176\5\2"+
    "\1\0\16\2\3\0\1\2\5\0\3\2\1\0\7\2"+
    "\14\0\5\2\5\0\7\2\1\177\4\2\1\0\16\2"+
    "\3\0\1\2\5\0\3\2\1\0\7\2\14\0\5\2"+
    "\5\0\1\2\1\200\1\201\11\2\1\0\15\2\1\202"+
    "\3\0\1\2\5\0\3\2\1\0\7\2\14\0\5\2"+
    "\5\0\14\2\1\0\16\2\3\0\1\2\5\0\2\2"+
    "\1\203\1\0\7\2\14\0\5\2\5\0\7\2\1\204"+
    "\4\2\1\0\16\2\3\0\1\2\5\0\3\2\1\0"+
    "\7\2\14\0\5\2\5\0\7\2\1\205\4\2\1\0"+
    "\16\2\3\0\1\2\5\0\3\2\1\0\7\2\14\0"+
    "\5\2\5\0\12\2\1\206\1\2\1\0\16\2\3\0"+
    "\1\2\5\0\3\2\1\0\7\2\14\0\5\2\5\0"+
    "\6\2\1\207\5\2\1\0\16\2\3\0\1\2\5\0"+
    "\3\2\1\0\7\2\14\0\3\2\1\210\1\2\5\0"+
    "\14\2\1\0\16\2\3\0\1\2\5\0\3\2\1\0"+
    "\7\2\14\0\5\2\5\0\14\2\1\0\3\2\1\211"+
    "\12\2\3\0\1\2\5\0\3\2\1\0\7\2\14\0"+
    "\5\2\5\0\14\2\1\0\6\2\1\212\7\2\3\0"+
    "\1\2\5\0\3\2\1\0\7\2\14\0\5\2\5\0"+
    "\5\2\1\213\6\2\1\0\16\2\3\0\1\2\5\0"+
    "\3\2\73\0\1\214\23\0\1\153\1\0\2\153\102\0"+
    "\1\215\72\0\7\2\14\0\3\2\1\216\1\2\5\0"+
    "\14\2\1\0\16\2\3\0\1\2\5\0\3\2\1\0"+
    "\7\2\14\0\1\2\1\217\3\2\5\0\14\2\1\0"+
    "\16\2\3\0\1\2\5\0\3\2\1\0\7\2\14\0"+
    "\5\2\5\0\5\2\1\220\6\2\1\0\16\2\3\0"+
    "\1\2\5\0\3\2\1\0\7\2\14\0\5\2\5\0"+
    "\7\2\1\221\4\2\1\0\16\2\3\0\1\2\5\0"+
    "\3\2\1\0\7\2\14\0\5\2\5\0\5\2\1\222"+
    "\6\2\1\0\16\2\3\0\1\2\5\0\3\2\1\0"+
    "\7\2\14\0\1\2\1\223\3\2\5\0\14\2\1\0"+
    "\16\2\3\0\1\2\5\0\3\2\1\0\7\2\14\0"+
    "\5\2\5\0\7\2\1\224\4\2\1\0\16\2\3\0"+
    "\1\2\5\0\3\2\1\0\7\2\14\0\5\2\5\0"+
    "\5\2\1\225\6\2\1\0\16\2\3\0\1\2\5\0"+
    "\3\2\1\0\7\2\14\0\1\226\4\2\5\0\14\2"+
    "\1\0\16\2\3\0\1\2\5\0\3\2\1\0\7\2"+
    "\14\0\1\227\4\2\5\0\14\2\1\0\16\2\3\0"+
    "\1\2\5\0\3\2\1\0\7\2\14\0\5\2\5\0"+
    "\3\2\1\230\10\2\1\0\16\2\3\0\1\2\5\0"+
    "\3\2\1\0\5\2\1\231\1\2\14\0\1\2\1\232"+
    "\3\2\5\0\10\2\1\233\3\2\1\0\16\2\3\0"+
    "\1\2\5\0\3\2\1\0\7\2\14\0\3\2\1\234"+
    "\1\2\5\0\14\2\1\0\16\2\3\0\1\2\5\0"+
    "\3\2\1\0\7\2\14\0\5\2\5\0\1\2\1\235"+
    "\12\2\1\0\16\2\3\0\1\2\5\0\3\2\1\0"+
    "\7\2\14\0\5\2\5\0\7\2\1\236\4\2\1\0"+
    "\16\2\3\0\1\2\5\0\3\2\1\0\7\2\14\0"+
    "\5\2\5\0\2\2\1\237\11\2\1\0\16\2\3\0"+
    "\1\2\5\0\3\2\1\0\7\2\14\0\5\2\5\0"+
    "\1\240\13\2\1\0\16\2\3\0\1\2\5\0\3\2"+
    "\1\0\7\2\14\0\5\2\5\0\14\2\1\0\16\2"+
    "\3\0\1\2\5\0\1\241\2\2\1\0\7\2\14\0"+
    "\1\242\4\2\5\0\14\2\1\0\16\2\3\0\1\2"+
    "\5\0\3\2\1\0\7\2\14\0\1\2\1\243\3\2"+
    "\5\0\14\2\1\0\16\2\3\0\1\2\5\0\3\2"+
    "\1\0\7\2\14\0\3\2\1\244\1\2\5\0\14\2"+
    "\1\0\16\2\3\0\1\2\5\0\3\2\1\0\7\2"+
    "\14\0\1\2\1\245\3\2\5\0\14\2\1\0\16\2"+
    "\3\0\1\2\5\0\3\2\1\0\7\2\14\0\5\2"+
    "\5\0\7\2\1\246\4\2\1\0\16\2\3\0\1\2"+
    "\5\0\3\2\1\0\7\2\14\0\1\2\1\247\3\2"+
    "\5\0\14\2\1\0\16\2\3\0\1\2\5\0\3\2"+
    "\1\0\7\2\14\0\5\2\5\0\4\2\1\250\7\2"+
    "\1\0\16\2\3\0\1\2\5\0\3\2\1\0\7\2"+
    "\14\0\5\2\5\0\11\2\1\251\2\2\1\0\16\2"+
    "\3\0\1\2\5\0\3\2\1\0\7\2\14\0\5\2"+
    "\5\0\7\2\1\252\4\2\1\0\16\2\3\0\1\2"+
    "\5\0\3\2\1\0\7\2\14\0\5\2\5\0\14\2"+
    "\1\0\4\2\1\253\11\2\3\0\1\2\5\0\3\2"+
    "\1\0\7\2\14\0\5\2\5\0\14\2\1\0\7\2"+
    "\1\254\6\2\3\0\1\2\5\0\3\2\1\0\5\2"+
    "\1\255\1\2\14\0\5\2\5\0\14\2\1\0\16\2"+
    "\3\0\1\2\5\0\3\2\1\0\7\2\14\0\4\2"+
    "\1\256\5\0\14\2\1\0\16\2\3\0\1\2\5\0"+
    "\3\2\1\0\7\2\14\0\5\2\5\0\6\2\1\257"+
    "\5\2\1\0\16\2\3\0\1\2\5\0\3\2\1\0"+
    "\7\2\14\0\5\2\5\0\6\2\1\260\5\2\1\0"+
    "\16\2\3\0\1\2\5\0\3\2\1\0\7\2\14\0"+
    "\3\2\1\261\1\2\5\0\14\2\1\0\16\2\3\0"+
    "\1\2\5\0\3\2\1\0\7\2\14\0\5\2\5\0"+
    "\6\2\1\262\5\2\1\0\16\2\3\0\1\2\5\0"+
    "\3\2\1\0\7\2\14\0\3\2\1\263\1\2\5\0"+
    "\14\2\1\0\16\2\3\0\1\2\5\0\3\2\1\0"+
    "\7\2\14\0\5\2\5\0\6\2\1\264\5\2\1\0"+
    "\16\2\3\0\1\2\5\0\3\2\1\0\7\2\14\0"+
    "\1\2\1\265\3\2\5\0\14\2\1\0\16\2\3\0"+
    "\1\2\5\0\3\2\1\0\7\2\14\0\1\2\1\266"+
    "\3\2\5\0\14\2\1\0\16\2\3\0\1\2\5\0"+
    "\3\2\1\0\7\2\14\0\1\2\1\267\3\2\5\0"+
    "\14\2\1\0\16\2\3\0\1\2\5\0\3\2\1\0"+
    "\3\2\1\270\3\2\14\0\5\2\5\0\11\2\1\271"+
    "\2\2\1\0\16\2\3\0\1\2\5\0\3\2\1\0"+
    "\7\2\14\0\5\2\5\0\6\2\1\272\5\2\1\0"+
    "\16\2\3\0\1\2\5\0\3\2\1\0\7\2\14\0"+
    "\5\2\5\0\14\2\1\0\15\2\1\273\3\0\1\2"+
    "\5\0\3\2\1\0\7\2\14\0\5\2\5\0\2\2"+
    "\1\274\11\2\1\0\16\2\3\0\1\2\5\0\3\2"+
    "\1\0\7\2\14\0\1\2\1\275\3\2\5\0\14\2"+
    "\1\0\16\2\3\0\1\2\5\0\3\2\1\0\7\2"+
    "\14\0\1\2\1\276\3\2\5\0\14\2\1\0\16\2"+
    "\3\0\1\2\5\0\3\2\1\0\7\2\14\0\5\2"+
    "\5\0\1\2\1\277\12\2\1\0\16\2\3\0\1\2"+
    "\5\0\3\2\1\0\7\2\14\0\5\2\5\0\5\2"+
    "\1\300\6\2\1\0\16\2\3\0\1\2\5\0\3\2"+
    "\1\0\7\2\14\0\5\2\5\0\6\2\1\301\5\2"+
    "\1\0\16\2\3\0\1\2\5\0\3\2\1\0\7\2"+
    "\14\0\5\2\5\0\2\2\1\302\11\2\1\0\16\2"+
    "\3\0\1\2\5\0\3\2\1\0\7\2\14\0\1\2"+
    "\1\303\3\2\5\0\14\2\1\0\16\2\3\0\1\2"+
    "\5\0\3\2\1\0\7\2\14\0\5\2\5\0\6\2"+
    "\1\304\5\2\1\0\16\2\3\0\1\2\5\0\3\2"+
    "\1\0\7\2\14\0\3\2\1\305\1\2\5\0\14\2"+
    "\1\0\16\2\3\0\1\2\5\0\3\2\1\0\7\2"+
    "\14\0\1\2\1\306\3\2\5\0\14\2\1\0\16\2"+
    "\3\0\1\2\5\0\3\2\1\0\7\2\14\0\5\2"+
    "\5\0\14\2\1\0\2\2\1\307\13\2\3\0\1\2"+
    "\5\0\3\2\1\0\7\2\14\0\5\2\5\0\1\2"+
    "\1\310\12\2\1\0\16\2\3\0\1\2\5\0\3\2"+
    "\1\0\7\2\14\0\1\2\1\311\3\2\5\0\14\2"+
    "\1\0\16\2\3\0\1\2\5\0\3\2\1\0\7\2"+
    "\14\0\5\2\5\0\11\2\1\312\2\2\1\0\16\2"+
    "\3\0\1\2\5\0\3\2\1\0\7\2\14\0\5\2"+
    "\5\0\7\2\1\313\4\2\1\0\16\2\3\0\1\2"+
    "\5\0\3\2\1\0\7\2\14\0\5\2\5\0\1\2"+
    "\1\314\12\2\1\0\16\2\3\0\1\2\5\0\3\2"+
    "\1\0\7\2\14\0\5\2\5\0\11\2\1\315\2\2"+
    "\1\0\16\2\3\0\1\2\5\0\3\2\1\0\7\2"+
    "\14\0\4\2\1\316\5\0\14\2\1\0\16\2\3\0"+
    "\1\2\5\0\3\2\1\0\7\2\14\0\5\2\5\0"+
    "\13\2\1\317\1\0\16\2\3\0\1\2\5\0\3\2"+
    "\1\0\7\2\14\0\5\2\5\0\12\2\1\320\1\2"+
    "\1\0\16\2\3\0\1\2\5\0\3\2\1\0\7\2"+
    "\14\0\5\2\5\0\12\2\1\321\1\2\1\0\16\2"+
    "\3\0\1\2\5\0\3\2\1\0\7\2\14\0\5\2"+
    "\5\0\14\2\1\0\16\2\3\0\1\2\5\0\1\322"+
    "\2\2\1\0\7\2\14\0\3\2\1\323\1\2\5\0"+
    "\14\2\1\0\16\2\3\0\1\2\5\0\3\2\1\0"+
    "\7\2\14\0\5\2\5\0\7\2\1\324\4\2\1\0"+
    "\16\2\3\0\1\2\5\0\3\2\1\0\7\2\14\0"+
    "\5\2\5\0\5\2\1\325\6\2\1\0\16\2\3\0"+
    "\1\2\5\0\3\2\1\0\7\2\14\0\5\2\5\0"+
    "\11\2\1\326\2\2\1\0\16\2\3\0\1\2\5\0"+
    "\3\2\1\0\7\2\14\0\5\2\5\0\7\2\1\327"+
    "\4\2\1\0\16\2\3\0\1\2\5\0\3\2\1\0"+
    "\7\2\14\0\5\2\5\0\2\2\1\330\3\2\1\331"+
    "\5\2\1\0\16\2\3\0\1\2\5\0\3\2\1\0"+
    "\7\2\14\0\2\2\1\332\2\2\5\0\14\2\1\0"+
    "\16\2\3\0\1\2\5\0\3\2\1\0\7\2\14\0"+
    "\5\2\5\0\7\2\1\333\4\2\1\0\16\2\3\0"+
    "\1\2\5\0\3\2\1\0\7\2\14\0\5\2\5\0"+
    "\6\2\1\334\5\2\1\0\16\2\3\0\1\2\5\0"+
    "\3\2\1\0\7\2\14\0\5\2\5\0\1\2\1\335"+
    "\12\2\1\0\16\2\3\0\1\2\5\0\3\2\1\0"+
    "\7\2\14\0\5\2\5\0\11\2\1\336\2\2\1\0"+
    "\16\2\3\0\1\2\5\0\3\2\1\0\7\2\14\0"+
    "\5\2\5\0\12\2\1\337\1\2\1\0\16\2\3\0"+
    "\1\2\5\0\3\2\1\0\7\2\14\0\5\2\5\0"+
    "\1\2\1\340\12\2\1\0\16\2\3\0\1\2\5\0"+
    "\3\2\1\0\7\2\14\0\5\2\5\0\12\2\1\341"+
    "\1\2\1\0\16\2\3\0\1\2\5\0\3\2\1\0"+
    "\7\2\14\0\5\2\5\0\1\2\1\342\12\2\1\0"+
    "\16\2\3\0\1\2\5\0\3\2\1\0\7\2\14\0"+
    "\5\2\5\0\1\2\1\343\12\2\1\0\16\2\3\0"+
    "\1\2\5\0\3\2\1\0\7\2\14\0\5\2\5\0"+
    "\1\2\1\344\12\2\1\0\16\2\3\0\1\2\5\0"+
    "\3\2\1\0\7\2\14\0\5\2\5\0\1\2\1\345"+
    "\12\2\1\0\16\2\3\0\1\2\5\0\3\2\1\0"+
    "\7\2\14\0\5\2\5\0\1\2\1\346\12\2\1\0"+
    "\16\2\3\0\1\2\5\0\3\2\1\0\7\2\14\0"+
    "\5\2\5\0\7\2\1\347\4\2\1\0\16\2\3\0"+
    "\1\2\5\0\3\2\1\0\7\2\14\0\5\2\5\0"+
    "\6\2\1\350\5\2\1\0\16\2\3\0\1\2\5\0"+
    "\3\2\1\0\7\2\14\0\5\2\5\0\10\2\1\351"+
    "\3\2\1\0\16\2\3\0\1\2\5\0\3\2\1\0"+
    "\7\2\14\0\5\2\5\0\2\2\1\352\11\2\1\0"+
    "\16\2\3\0\1\2\5\0\3\2\1\0\7\2\14\0"+
    "\5\2\5\0\7\2\1\353\4\2\1\0\16\2\3\0"+
    "\1\2\5\0\3\2\1\0\7\2\14\0\1\2\1\354"+
    "\3\2\5\0\14\2\1\0\16\2\3\0\1\2\5\0"+
    "\3\2\1\0\7\2\14\0\1\2\1\355\3\2\5\0"+
    "\14\2\1\0\16\2\3\0\1\2\5\0\3\2\1\0"+
    "\7\2\14\0\1\2\1\356\3\2\5\0\14\2\1\0"+
    "\16\2\3\0\1\2\5\0\3\2\1\0\7\2\14\0"+
    "\5\2\5\0\11\2\1\357\2\2\1\0\16\2\3\0"+
    "\1\2\5\0\3\2\1\0\7\2\14\0\5\2\5\0"+
    "\12\2\1\360\1\2\1\0\16\2\3\0\1\2\5\0"+
    "\3\2\1\0\7\2\14\0\5\2\5\0\14\2\1\0"+
    "\15\2\1\361\3\0\1\2\5\0\3\2\1\0\7\2"+
    "\14\0\5\2\5\0\2\2\1\362\11\2\1\0\16\2"+
    "\3\0\1\2\5\0\3\2\1\0\7\2\14\0\5\2"+
    "\5\0\12\2\1\363\1\2\1\0\16\2\3\0\1\2"+
    "\5\0\3\2\1\0\7\2\14\0\5\2\5\0\2\2"+
    "\1\364\11\2\1\0\16\2\3\0\1\2\5\0\3\2"+
    "\1\0\7\2\14\0\5\2\5\0\12\2\1\365\1\2"+
    "\1\0\16\2\3\0\1\2\5\0\3\2\1\0\7\2"+
    "\14\0\5\2\5\0\12\2\1\366\1\2\1\0\16\2"+
    "\3\0\1\2\5\0\3\2\1\0\7\2\14\0\5\2"+
    "\5\0\13\2\1\367\1\0\16\2\3\0\1\2\5\0"+
    "\3\2\1\0\7\2\14\0\5\2\5\0\13\2\1\370"+
    "\1\0\16\2\3\0\1\2\5\0\3\2\1\0\7\2"+
    "\14\0\2\2\1\371\2\2\5\0\14\2\1\0\16\2"+
    "\3\0\1\2\5\0\3\2\1\0\7\2\14\0\5\2"+
    "\5\0\10\2\1\372\3\2\1\0\16\2\3\0\1\2"+
    "\5\0\3\2\1\0\7\2\14\0\5\2\5\0\13\2"+
    "\1\373\1\0\16\2\3\0\1\2\5\0\3\2\1\0"+
    "\7\2\14\0\1\2\1\374\3\2\5\0\14\2\1\0"+
    "\16\2\3\0\1\2\5\0\3\2\1\0\7\2\14\0"+
    "\5\2\5\0\1\2\1\375\12\2\1\0\16\2\3\0"+
    "\1\2\5\0\3\2\1\0\7\2\14\0\5\2\5\0"+
    "\14\2\1\0\15\2\1\376\3\0\1\2\5\0\3\2"+
    "\1\0\7\2\14\0\1\377\4\2\5\0\14\2\1\0"+
    "\16\2\3\0\1\2\5\0\3\2\1\0\7\2\14\0"+
    "\5\2\5\0\6\2\1\u0100\5\2\1\0\16\2\3\0"+
    "\1\2\5\0\3\2\1\0\7\2\14\0\5\2\5\0"+
    "\14\2\1\0\16\2\3\0\1\2\5\0\1\2\1\u0101"+
    "\1\2\1\0\7\2\14\0\5\2\5\0\7\2\1\u0102"+
    "\4\2\1\0\16\2\3\0\1\2\5\0\3\2\1\0"+
    "\7\2\14\0\5\2\5\0\7\2\1\u0103\4\2\1\0"+
    "\16\2\3\0\1\2\5\0\3\2\1\0\7\2\14\0"+
    "\3\2\1\u0104\1\2\5\0\14\2\1\0\16\2\3\0"+
    "\1\2\5\0\3\2\1\0\7\2\14\0\5\2\5\0"+
    "\5\2\1\u0105\6\2\1\0\16\2\3\0\1\2\5\0"+
    "\3\2\1\0\7\2\14\0\5\2\5\0\10\2\1\u0106"+
    "\3\2\1\0\16\2\3\0\1\2\5\0\3\2\1\0"+
    "\7\2\14\0\5\2\5\0\6\2\1\u0107\5\2\1\0"+
    "\16\2\3\0\1\2\5\0\3\2\1\0\7\2\14\0"+
    "\5\2\5\0\7\2\1\u0108\4\2\1\0\16\2\3\0"+
    "\1\2\5\0\3\2\1\0\7\2\14\0\3\2\1\u0109"+
    "\1\2\5\0\14\2\1\0\16\2\3\0\1\2\5\0"+
    "\3\2\1\0\7\2\14\0\5\2\5\0\12\2\1\u010a"+
    "\1\2\1\0\16\2\3\0\1\2\5\0\3\2\1\0"+
    "\7\2\14\0\5\2\5\0\1\2\1\u010b\12\2\1\0"+
    "\16\2\3\0\1\2\5\0\3\2\1\0\7\2\14\0"+
    "\5\2\5\0\1\2\1\u010c\12\2\1\0\16\2\3\0"+
    "\1\2\5\0\3\2\1\0\7\2\14\0\5\2\5\0"+
    "\5\2\1\u010d\6\2\1\0\16\2\3\0\1\2\5\0"+
    "\3\2\1\0\7\2\14\0\3\2\1\u010e\1\2\5\0"+
    "\14\2\1\0\16\2\3\0\1\2\5\0\3\2\1\0"+
    "\7\2\14\0\5\2\5\0\5\2\1\u010f\6\2\1\0"+
    "\16\2\3\0\1\2\5\0\3\2\1\0\7\2\14\0"+
    "\5\2\5\0\7\2\1\u0110\4\2\1\0\16\2\3\0"+
    "\1\2\5\0\3\2\1\0\7\2\14\0\1\2\1\u0111"+
    "\3\2\5\0\14\2\1\0\16\2\3\0\1\2\5\0"+
    "\3\2\1\0\7\2\14\0\5\2\5\0\5\2\1\u0112"+
    "\6\2\1\0\16\2\3\0\1\2\5\0\3\2\1\0"+
    "\7\2\14\0\5\2\5\0\7\2\1\u0113\4\2\1\0"+
    "\16\2\3\0\1\2\5\0\3\2\1\0\7\2\14\0"+
    "\5\2\5\0\7\2\1\u0114\4\2\1\0\16\2\3\0"+
    "\1\2\5\0\3\2\1\0\7\2\14\0\5\2\5\0"+
    "\7\2\1\u0115\4\2\1\0\16\2\3\0\1\2\5\0"+
    "\3\2\1\0\7\2\14\0\5\2\5\0\6\2\1\u0116"+
    "\5\2\1\0\16\2\3\0\1\2\5\0\3\2\1\0"+
    "\7\2\14\0\5\2\5\0\11\2\1\u0117\2\2\1\0"+
    "\16\2\3\0\1\2\5\0\3\2\1\0\7\2\14\0"+
    "\3\2\1\u0118\1\2\5\0\14\2\1\0\16\2\3\0"+
    "\1\2\5\0\3\2\1\0\7\2\14\0\5\2\5\0"+
    "\13\2\1\u0119\1\0\16\2\3\0\1\2\5\0\3\2"+
    "\1\0\7\2\14\0\5\2\5\0\11\2\1\u011a\2\2"+
    "\1\0\16\2\3\0\1\2\5\0\3\2\1\0\7\2"+
    "\14\0\5\2\5\0\12\2\1\u011b\1\2\1\0\16\2"+
    "\3\0\1\2\5\0\3\2\1\0\7\2\14\0\1\2"+
    "\1\u011c\3\2\5\0\14\2\1\0\16\2\3\0\1\2"+
    "\5\0\3\2\1\0\7\2\14\0\1\2\1\u011d\3\2"+
    "\5\0\14\2\1\0\16\2\3\0\1\2\5\0\3\2"+
    "\1\0\7\2\14\0\5\2\5\0\7\2\1\u011e\4\2"+
    "\1\0\16\2\3\0\1\2\5\0\3\2\1\0\7\2"+
    "\14\0\5\2\5\0\11\2\1\u011f\2\2\1\0\16\2"+
    "\3\0\1\2\5\0\3\2\1\0\7\2\14\0\5\2"+
    "\5\0\4\2\1\u0120\7\2\1\0\16\2\3\0\1\2"+
    "\5\0\3\2\1\0\7\2\14\0\5\2\5\0\7\2"+
    "\1\u0121\4\2\1\0\16\2\3\0\1\2\5\0\3\2";

  private static int [] zzUnpackTrans() {
    int [] result = new int[15111];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\12\1\1\11\1\0\1\1\3\11\5\1\2\11\1\1"+
    "\1\11\12\1\1\11\16\1\2\0\2\11\1\0\2\1"+
    "\2\0\1\1\1\11\6\1\2\11\31\1\4\11\1\0"+
    "\5\11\3\1\1\0\37\1\2\11\224\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[289];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public static Integer currentLine = 0;
	public Lex(java.io.InputStream r, SymbolFactory sf){
		this(r);
		this.sf=sf;
	}
	private SymbolFactory sf;
	//public HashSet<String> varlist = new HashSet<String>();


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Lex(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 176) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 78: 
          { return sf.newSymbol("", sym.T_INITIAL_STATE);
          }
        case 82: break;
        case 61: 
          { return sf.newSymbol("",sym.T_MEMORY);
          }
        case 83: break;
        case 19: 
          { return sf.newSymbol("",sym.T_WEAK_UNTIL_OPER);
          }
        case 84: break;
        case 41: 
          { return sf.newSymbol("",sym.T_OPER,">=");
          }
        case 85: break;
        case 48: 
          { return sf.newSymbol("", sym.T_INFO);
          }
        case 86: break;
        case 39: 
          { return sf.newSymbol("",sym.T_LSHIFT,">");
          }
        case 87: break;
        case 8: 
          { return sf.newSymbol("",sym.T_MULT);
          }
        case 88: break;
        case 53: 
          { return sf.newSymbol("",sym.T_READ);
          }
        case 89: break;
        case 12: 
          { return sf.newSymbol("",sym.T_DOISPONTOS);
          }
        case 90: break;
        case 33: 
          { return sf.newSymbol("",sym.T_MS);
          }
        case 91: break;
        case 58: 
          { return sf.newSymbol("",sym.T_WRITE);
          }
        case 92: break;
        case 4: 
          { return sf.newSymbol("",sym.T_DOT);
          }
        case 93: break;
        case 55: 
          { return sf.newSymbol("", sym.T_STATE);
          }
        case 94: break;
        case 67: 
          { return sf.newSymbol("", sym.T_INTERNAL);
          }
        case 95: break;
        case 63: 
          { return sf.newSymbol("", sym.T_ASSIGNS);
          }
        case 96: break;
        case 11: 
          { return sf.newSymbol("",sym.T_PONTVIRG);
          }
        case 97: break;
        case 35: 
          { return sf.newSymbol("",sym.T_NS);
          }
        case 98: break;
        case 1: 
          { return sf.newSymbol("",sym.T_MASKREP,yytext());
          }
        case 99: break;
        case 57: 
          { return sf.newSymbol("",sym.T_REGWRITE);
          }
        case 100: break;
        case 25: 
          { return sf.newSymbol("",sym.T_DUAL_UNTIL_OPER);
          }
        case 101: break;
        case 9: 
          { return sf.newSymbol("",sym.T_OPEN_PAR);
          }
        case 102: break;
        case 15: 
          { return sf.newSymbol("",sym.T_OPEN_BRACKET);
          }
        case 103: break;
        case 44: 
          { return sf.newSymbol("",sym.T_BOOL_CONJ);
          }
        case 104: break;
        case 70: 
          { return sf.newSymbol("",sym.T_MAX_DELAY);
          }
        case 105: break;
        case 36: 
          { return sf.newSymbol("",sym.T_PS);
          }
        case 106: break;
        case 71: 
          { return sf.newSymbol("",sym.T_RESERVED);
          }
        case 107: break;
        case 32: 
          { return sf.newSymbol("",sym.T_READWRITE);
          }
        case 108: break;
        case 77: 
          { return sf.newSymbol("", sym.T_GLOBAL_STATE);
          }
        case 109: break;
        case 31: 
          { return sf.newSymbol("",sym.T_OPER,"==");
          }
        case 110: break;
        case 26: 
          { return sf.newSymbol("",sym.T_MINUS);
          }
        case 111: break;
        case 64: 
          { return sf.newSymbol("",sym.T_PATTERN);
          }
        case 112: break;
        case 54: 
          { return sf.newSymbol("",sym.T_ALIAS);
          }
        case 113: break;
        case 80: 
          { return sf.newSymbol("", sym.T_LLTLF);
          }
        case 114: break;
        case 40: 
          { return sf.newSymbol("",sym.T_EVENT_OPER);
          }
        case 115: break;
        case 28: 
          { return sf.newSymbol("",sym.T_TEXTSTR,yytext().replace("\"", ""));
          }
        case 116: break;
        case 49: 
          { return sf.newSymbol("",sym.T_MASK);
          }
        case 117: break;
        case 62: 
          { return sf.newSymbol("",sym.T_DC_FORMAT);
          }
        case 118: break;
        case 18: 
          { return sf.newSymbol("",sym.T_VIRG);
          }
        case 119: break;
        case 34: 
          { return sf.newSymbol("",sym.T_US);
          }
        case 120: break;
        case 81: 
          { return sf.newSymbol("", sym.T_ADD_ENTRY_POINT);
          }
        case 121: break;
        case 2: 
          { return sf.newSymbol("Ident",sym.T_IDENT,yytext());
          }
        case 122: break;
        case 47: 
          { return sf.newSymbol("",sym.T_BOOL_EQUI);
          }
        case 123: break;
        case 13: 
          { return sf.newSymbol("",sym.T_OPEN_BRACE);
          }
        case 124: break;
        case 30: 
          { return sf.newSymbol("",sym.T_ALWAYS_OPER);
          }
        case 125: break;
        case 60: 
          { return sf.newSymbol("",sym.T_IMPORT);
          }
        case 126: break;
        case 38: 
          { return sf.newSymbol("",sym.T_OPER,"<=");
          }
        case 127: break;
        case 56: 
          { return sf.newSymbol("", sym.T_FALSE);
          }
        case 128: break;
        case 42: 
          { return sf.newSymbol("",sym.T_RSHIFT,">");
          }
        case 129: break;
        case 46: 
          { return sf.newSymbol("", sym.T_VAR);
          }
        case 130: break;
        case 79: 
          { return sf.newSymbol("", sym.T_ADD_EXIT_POINT);
          }
        case 131: break;
        case 43: 
          { return sf.newSymbol("",sym.T_BOOL_IMPL);
          }
        case 132: break;
        case 37: 
          { return sf.newSymbol("",sym.T_OPER,"!=");
          }
        case 133: break;
        case 27: 
          { return sf.newSymbol("",sym.T_PLUS);
          }
        case 134: break;
        case 75: 
          { return sf.newSymbol("", sym.T_ADD_PROPERTY);
          }
        case 135: break;
        case 6: 
          { Lex.currentLine = yyline;
          }
        case 136: break;
        case 14: 
          { return sf.newSymbol("",sym.T_CLOSE_BRACE);
          }
        case 137: break;
        case 20: 
          { return sf.newSymbol("",sym.T_SEC);
          }
        case 138: break;
        case 10: 
          { return sf.newSymbol("",sym.T_CLOSE_PAR);
          }
        case 139: break;
        case 23: 
          { return sf.newSymbol("",sym.T_OPER,"<");
          }
        case 140: break;
        case 16: 
          { return sf.newSymbol("",sym.T_CLOSE_BRACKET);
          }
        case 141: break;
        case 45: 
          { return sf.newSymbol("",sym.T_BOOL_DISJ);
          }
        case 142: break;
        case 73: 
          { return sf.newSymbol("", sym.T_ORTHO_STATE);
          }
        case 143: break;
        case 24: 
          { return sf.newSymbol("",sym.T_OPER,">");
          }
        case 144: break;
        case 72: 
          { return sf.newSymbol("",sym.T_DC_REG);
          }
        case 145: break;
        case 66: 
          { return sf.newSymbol("", sym.T_EXTERNAL);
          }
        case 146: break;
        case 59: 
          { return sf.newSymbol("",sym.T_DEVICE);
          }
        case 147: break;
        case 69: 
          { return sf.newSymbol("",sym.T_MIN_DELAY);
          }
        case 148: break;
        case 22: 
          { return sf.newSymbol("",sym.T_PROP_NEG_OPER);
          }
        case 149: break;
        case 68: 
          { return sf.newSymbol("", sym.T_CRITICAL);
          }
        case 150: break;
        case 3: 
          { return sf.newSymbol("",sym.T_INT,yytext());
          }
        case 151: break;
        case 76: 
          { return sf.newSymbol("", sym.T_ORTHO_REGION);
          }
        case 152: break;
        case 51: 
          { return sf.newSymbol("", sym.T_TRUE);
          }
        case 153: break;
        case 29: 
          { return sf.newSymbol("",sym.T_NEXT_OPER);
          }
        case 154: break;
        case 74: 
          { return sf.newSymbol("", sym.T_ADD_BEHAVIOR);
          }
        case 155: break;
        case 21: 
          { return sf.newSymbol("",sym.T_UNTIL_OPER);
          }
        case 156: break;
        case 52: 
          { return sf.newSymbol("", sym.T_LTLF);
          }
        case 157: break;
        case 7: 
          { return sf.newSymbol("",sym.T_DIV);
          }
        case 158: break;
        case 17: 
          { return sf.newSymbol("",sym.T_IGUAL);
          }
        case 159: break;
        case 65: 
          { return sf.newSymbol("", sym.T_WARNING);
          }
        case 160: break;
        case 50: 
          { return sf.newSymbol("",sym.T_REGREAD);
          }
        case 161: break;
        case 5: 
          { 
          }
        case 162: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {     return sf.newSymbol("EOF",sym.EOF);
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
