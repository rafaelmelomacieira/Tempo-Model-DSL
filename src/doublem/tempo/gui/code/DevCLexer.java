/* The following code was generated by JFlex 1.4.3 on 1/27/16 3:03 PM */

package doublem.tempo.gui.code;



import jsyntaxpane.DefaultLexer;

import jsyntaxpane.Token;

import jsyntaxpane.TokenType;

 


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 1/27/16 3:03 PM from the specification file
 * <tt>tdevc_lex_java_editorpane.y</tt>
 */
public final class DevCLexer extends DefaultLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\15\1\14\2\0\1\15\22\0\1\12\1\104\1\17\2\0"+
    "\1\35\1\105\1\22\1\20\1\21\1\16\1\107\1\22\1\103\1\11"+
    "\1\13\1\4\1\10\10\3\1\22\1\22\1\70\1\34\1\67\1\0"+
    "\1\22\1\53\1\71\1\102\1\42\1\37\1\6\2\1\1\75\1\1"+
    "\1\54\1\73\1\52\1\77\1\100\1\101\1\1\1\36\1\40\1\76"+
    "\1\72\1\41\1\74\3\1\1\32\1\0\1\33\1\0\1\2\1\0"+
    "\1\50\1\7\1\27\1\23\1\24\1\64\1\61\1\47\1\26\1\1"+
    "\1\66\1\51\1\57\1\55\1\56\1\62\1\65\1\43\1\44\1\46"+
    "\1\60\1\25\1\45\1\5\1\63\1\1\1\30\1\106\1\31\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\1\1\2\2\3\1\2\1\3\1\4\2\1\2\4"+
    "\1\5\1\6\5\2\1\7\1\10\1\11\1\12\2\4"+
    "\2\2\3\13\13\2\1\14\1\15\1\2\2\13\4\2"+
    "\4\1\1\13\1\3\2\0\1\3\2\2\3\0\1\16"+
    "\13\2\1\13\2\2\2\0\1\2\1\17\33\2\1\0"+
    "\7\2\1\3\1\0\1\3\3\2\2\20\1\0\10\2"+
    "\1\21\7\2\2\0\56\2\1\3\1\0\3\2\1\20"+
    "\23\2\2\0\1\17\47\2\1\3\1\0\14\2\1\13"+
    "\7\2\1\0\47\2\1\3\1\0\6\2\1\21\10\2"+
    "\1\0\24\2\1\13\16\2\1\3\1\0\12\2\1\0"+
    "\2\2\1\21\22\2\1\3\1\0\6\2\1\0\1\21"+
    "\17\2\1\3\1\0\15\2\1\3\1\0\7\2\1\3"+
    "\1\0\5\2\1\3\1\0\3\2\1\3\1\0\2\2"+
    "\1\3\1\0\1\2\1\3\1\0\1\2\1\3\1\0"+
    "\1\2\1\3\1\0\1\2\1\3\1\0\1\2\1\3"+
    "\1\0\1\2\1\3\1\0\1\2\1\3\1\0\1\3"+
    "\1\0\1\3\1\0\1\3\1\0\1\3\1\0\1\3"+
    "\1\0\1\3\1\0\1\3\1\0\1\3\1\0\1\3"+
    "\1\0\1\3\1\0\1\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[516];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\110\0\220\0\330\0\u0120\0\u0168\0\u01b0\0\u01f8"+
    "\0\u0240\0\u0288\0\110\0\u02d0\0\u0318\0\110\0\u0360\0\u03a8"+
    "\0\u03f0\0\u0438\0\u0480\0\110\0\110\0\u04c8\0\110\0\u0510"+
    "\0\u0558\0\u05a0\0\u05e8\0\u0630\0\u0678\0\u06c0\0\u0708\0\u0750"+
    "\0\u0798\0\u07e0\0\u0828\0\u0870\0\u08b8\0\u0900\0\u0948\0\u0990"+
    "\0\u09d8\0\u0510\0\u0a20\0\u0a68\0\u0828\0\u0ab0\0\u0af8\0\u0b40"+
    "\0\u0b88\0\u0bd0\0\u0c18\0\u0510\0\u0c60\0\u0ca8\0\110\0\u0cf0"+
    "\0\u0d38\0\u0d80\0\u0dc8\0\u0e10\0\u0e58\0\u0ea0\0\u0ee8\0\u02d0"+
    "\0\u02d0\0\u0f30\0\u0f78\0\u0fc0\0\u1008\0\u1050\0\u1098\0\u10e0"+
    "\0\u1128\0\u1170\0\u11b8\0\u1200\0\220\0\u1248\0\u1290\0\u12d8"+
    "\0\u1320\0\u1368\0\220\0\u13b0\0\u13f8\0\u1440\0\u1488\0\u14d0"+
    "\0\u1518\0\u1560\0\u15a8\0\u15f0\0\u1638\0\u1680\0\u16c8\0\u1710"+
    "\0\u1758\0\u17a0\0\u17e8\0\u1830\0\u1878\0\u18c0\0\u1908\0\u1950"+
    "\0\u1998\0\u19e0\0\u1a28\0\u1a70\0\u1ab8\0\u1b00\0\u0c18\0\u1b48"+
    "\0\u1b90\0\u1bd8\0\u1c20\0\u1c68\0\u1cb0\0\u1cf8\0\u1d40\0\u1d88"+
    "\0\u0d38\0\u1dd0\0\u1e18\0\u1e60\0\u1ea8\0\u0ea0\0\u1ef0\0\u1f38"+
    "\0\u1f80\0\u1fc8\0\u2010\0\u2058\0\u20a0\0\u20e8\0\u2130\0\220"+
    "\0\u2178\0\u21c0\0\u2208\0\u2250\0\u2298\0\u22e0\0\u2328\0\u2370"+
    "\0\u23b8\0\u2400\0\u2448\0\u2490\0\u24d8\0\u2520\0\u2568\0\u25b0"+
    "\0\u25f8\0\u2640\0\u2688\0\u26d0\0\u2718\0\u2760\0\u27a8\0\u27f0"+
    "\0\u2838\0\u2880\0\u28c8\0\u2910\0\u2958\0\u29a0\0\u29e8\0\u2a30"+
    "\0\u2a78\0\u2ac0\0\u2b08\0\u2b50\0\u2b98\0\u2be0\0\u2c28\0\u2c70"+
    "\0\u2cb8\0\u2d00\0\u2d48\0\u2d90\0\u2dd8\0\u2e20\0\u2e68\0\u2eb0"+
    "\0\u2ef8\0\u2f40\0\u2f88\0\u2fd0\0\u3018\0\u3060\0\u30a8\0\u30f0"+
    "\0\u3138\0\u3180\0\u31c8\0\u3210\0\110\0\u3258\0\u32a0\0\u32e8"+
    "\0\u3330\0\u3378\0\u33c0\0\u3408\0\u3450\0\u3498\0\u34e0\0\u3528"+
    "\0\u3570\0\u35b8\0\u3600\0\u3648\0\u3690\0\u36d8\0\u3720\0\u3768"+
    "\0\u37b0\0\u37f8\0\u3840\0\u3888\0\u38d0\0\u3918\0\u3960\0\u39a8"+
    "\0\u39f0\0\u3a38\0\u3a80\0\u3ac8\0\u3b10\0\u3b58\0\u3ba0\0\u3be8"+
    "\0\u3c30\0\u3c78\0\u3cc0\0\u3d08\0\u3d50\0\u3d98\0\u3de0\0\u3e28"+
    "\0\u3e70\0\u3eb8\0\u3f00\0\u3f48\0\u3f90\0\u3fd8\0\u4020\0\u4068"+
    "\0\u40b0\0\u40f8\0\u4140\0\u4188\0\u41d0\0\u4218\0\u4260\0\u42a8"+
    "\0\u42f0\0\u4338\0\u4380\0\u43c8\0\u4410\0\u4458\0\u44a0\0\u44e8"+
    "\0\u4530\0\u4578\0\u45c0\0\u4608\0\u4650\0\u4698\0\u46e0\0\u4728"+
    "\0\u4770\0\u47b8\0\u4800\0\u4848\0\u4890\0\u48d8\0\u4920\0\u4968"+
    "\0\u49b0\0\u49f8\0\u4a40\0\u4a88\0\u4ad0\0\u4b18\0\u4b60\0\u4ba8"+
    "\0\u4bf0\0\u4c38\0\u4c80\0\u4cc8\0\u4d10\0\u4d58\0\u4da0\0\u4de8"+
    "\0\u4e30\0\u4e78\0\u4ec0\0\u4f08\0\u4f50\0\u4f98\0\u4fe0\0\u5028"+
    "\0\u5070\0\u50b8\0\u5100\0\u5148\0\u5190\0\u51d8\0\u5220\0\u5268"+
    "\0\u52b0\0\u52f8\0\u5340\0\u5388\0\u53d0\0\u5418\0\u5460\0\u54a8"+
    "\0\u54f0\0\u5538\0\u5580\0\u55c8\0\u5610\0\u5658\0\u56a0\0\u56e8"+
    "\0\u25b0\0\u5730\0\u5778\0\u57c0\0\u5808\0\u5850\0\u5898\0\u58e0"+
    "\0\u5928\0\u5970\0\u59b8\0\u5a00\0\u5a48\0\u5a90\0\u5ad8\0\u5b20"+
    "\0\u5b68\0\u5bb0\0\u5bf8\0\u5c40\0\u5c88\0\u5cd0\0\u5d18\0\u5d60"+
    "\0\u5da8\0\u5df0\0\u5e38\0\u5e80\0\u5ec8\0\u5f10\0\u5f58\0\u5fa0"+
    "\0\u5fe8\0\u6030\0\u6078\0\u60c0\0\u6108\0\u6150\0\u6198\0\u61e0"+
    "\0\u6228\0\u6270\0\u62b8\0\u3840\0\u6300\0\u6348\0\u6390\0\u63d8"+
    "\0\u6420\0\u6468\0\u64b0\0\u64f8\0\u6540\0\u6588\0\u65d0\0\u6618"+
    "\0\u6660\0\u66a8\0\u66f0\0\u6738\0\u6780\0\u67c8\0\u6810\0\u6858"+
    "\0\u68a0\0\u68e8\0\u6930\0\u6978\0\u69c0\0\u6a08\0\u6a50\0\u6a98"+
    "\0\u6ae0\0\u6b28\0\u6b70\0\u6bb8\0\u6c00\0\u6c48\0\u6c90\0\u6cd8"+
    "\0\u6d20\0\u6d68\0\u6db0\0\u6df8\0\u6e40\0\u6e88\0\u6ed0\0\u6f18"+
    "\0\u6f60\0\u6fa8\0\u6ff0\0\u7038\0\u7080\0\u70c8\0\u7110\0\u7158"+
    "\0\u71a0\0\u71e8\0\u7230\0\u7278\0\u72c0\0\u7308\0\u7350\0\u7398"+
    "\0\u73e0\0\u7428\0\u7470\0\u74b8\0\u7500\0\u7548\0\u7590\0\u75d8"+
    "\0\u7620\0\u7668\0\u76b0\0\u76f8\0\u7740\0\u7788\0\u77d0\0\u7818"+
    "\0\u7860\0\u78a8\0\u78f0\0\u7938\0\u7980\0\u79c8\0\u7a10\0\u7a58"+
    "\0\u7aa0\0\u7ae8\0\u7b30\0\u7b78\0\u7bc0\0\u7c08\0\u7c50\0\u7c98"+
    "\0\u7ce0\0\u7d28\0\u7d70\0\u7db8\0\u7e00\0\u7e48\0\u7e90\0\u7ed8"+
    "\0\u7f20\0\u7f68\0\u7fb0\0\u7ff8\0\u8040\0\u8088\0\u80d0\0\u8118"+
    "\0\u8160\0\u81a8\0\u81f0\0\u8238\0\u8280\0\u82c8\0\u8310\0\u8358"+
    "\0\u83a0\0\u83e8\0\u8430\0\u8478\0\u84c0\0\u8508\0\u8550\0\u8598"+
    "\0\u85e0\0\u8628\0\u8670\0\u86b8\0\u8700\0\u8748\0\u8790\0\u87d8"+
    "\0\u8820\0\u8868\0\u88b0\0\u88f8\0\u8940\0\u8988\0\u89d0\0\u8a18"+
    "\0\u8a60\0\u8aa8\0\u8af0\0\110";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[516];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\2\1\4\1\5\2\3\1\6\1\7"+
    "\1\10\1\11\1\12\2\11\1\13\1\14\1\15\1\16"+
    "\1\13\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\3\1\33\1\34"+
    "\1\3\1\35\1\36\1\37\1\40\1\3\1\41\1\42"+
    "\1\43\3\3\1\44\1\45\1\46\1\47\1\50\1\3"+
    "\1\51\2\3\1\52\1\53\1\54\1\55\1\3\1\56"+
    "\1\57\1\3\1\60\1\61\1\43\1\62\1\63\1\64"+
    "\1\65\1\66\1\67\111\0\10\3\12\0\5\3\6\0"+
    "\31\3\2\0\12\3\10\0\2\4\3\0\1\4\102\0"+
    "\1\4\1\70\1\71\2\0\1\70\1\72\77\0\3\3"+
    "\1\73\3\3\1\73\12\0\1\3\1\74\1\3\1\75"+
    "\1\3\6\0\31\3\2\0\12\3\10\0\1\4\1\70"+
    "\3\0\1\70\1\72\102\0\1\72\3\0\2\72\110\0"+
    "\1\11\1\0\2\11\105\0\1\76\2\0\1\77\71\0"+
    "\14\100\1\0\2\100\1\101\70\100\21\0\1\67\67\0"+
    "\6\3\1\102\1\3\12\0\1\3\1\103\2\3\1\104"+
    "\6\0\12\3\1\105\16\3\2\0\12\3\6\0\4\3"+
    "\1\106\3\3\12\0\5\3\6\0\13\3\1\107\3\3"+
    "\1\110\11\3\2\0\12\3\6\0\10\3\12\0\5\3"+
    "\6\0\12\3\1\111\16\3\2\0\12\3\6\0\10\3"+
    "\12\0\5\3\6\0\5\3\1\112\11\3\1\113\1\3"+
    "\1\114\4\3\1\115\2\3\2\0\12\3\6\0\10\3"+
    "\12\0\5\3\6\0\5\3\1\116\4\3\1\117\16\3"+
    "\2\0\12\3\40\0\1\67\110\0\1\67\111\0\1\120"+
    "\13\0\1\121\36\0\10\3\12\0\5\3\6\0\1\3"+
    "\1\122\27\3\2\0\3\3\1\123\6\3\6\0\10\3"+
    "\12\0\5\3\6\0\1\3\1\124\27\3\2\0\12\3"+
    "\6\0\10\3\12\0\5\3\6\0\31\3\2\0\7\3"+
    "\1\125\2\3\6\0\10\3\12\0\1\3\1\126\3\3"+
    "\6\0\31\3\2\0\12\3\6\0\10\3\12\0\1\3"+
    "\1\127\3\3\6\0\10\3\1\130\20\3\2\0\12\3"+
    "\6\0\10\3\12\0\3\3\1\131\1\3\6\0\5\3"+
    "\1\132\4\3\1\133\16\3\2\0\12\3\6\0\10\3"+
    "\12\0\1\134\4\3\6\0\31\3\2\0\12\3\6\0"+
    "\10\3\12\0\1\135\4\3\6\0\6\3\1\136\4\3"+
    "\1\137\3\3\1\140\6\3\1\141\2\3\2\0\12\3"+
    "\6\0\10\3\12\0\1\3\1\142\1\3\1\143\1\3"+
    "\6\0\10\3\1\144\20\3\2\0\12\3\6\0\10\3"+
    "\12\0\5\3\6\0\2\3\1\123\26\3\2\0\12\3"+
    "\6\0\10\3\12\0\5\3\6\0\5\3\1\145\23\3"+
    "\2\0\12\3\6\0\10\3\12\0\1\3\1\146\1\3"+
    "\1\147\1\3\6\0\12\3\1\150\7\3\1\151\6\3"+
    "\2\0\12\3\6\0\10\3\12\0\4\3\1\152\6\0"+
    "\31\3\2\0\12\3\6\0\10\3\12\0\5\3\6\0"+
    "\13\3\1\153\15\3\2\0\12\3\6\0\10\3\12\0"+
    "\5\3\6\0\12\3\1\154\5\3\1\155\10\3\2\0"+
    "\12\3\6\0\10\3\12\0\5\3\6\0\20\3\1\156"+
    "\10\3\2\0\12\3\41\0\1\67\32\0\1\67\13\0"+
    "\1\157\5\0\10\3\12\0\5\3\6\0\31\3\2\0"+
    "\1\3\1\160\10\3\6\0\10\3\12\0\5\3\6\0"+
    "\1\161\30\3\2\0\12\3\6\0\10\3\12\0\5\3"+
    "\6\0\31\3\2\0\6\3\1\162\1\163\2\3\6\0"+
    "\10\3\12\0\5\3\6\0\2\3\1\123\26\3\2\0"+
    "\6\3\1\164\3\3\6\0\10\3\12\0\5\3\6\0"+
    "\31\3\2\0\10\3\1\165\1\3\6\0\10\3\12\0"+
    "\5\3\6\0\31\3\2\0\2\3\1\166\7\3\74\0"+
    "\1\67\125\0\1\67\110\0\1\67\4\0\1\4\1\167"+
    "\3\0\1\167\1\170\101\0\2\171\1\0\3\171\12\0"+
    "\2\171\2\0\1\171\7\0\1\171\2\0\1\171\5\0"+
    "\1\171\2\0\1\171\10\0\1\171\4\0\1\171\10\0"+
    "\1\171\11\0\1\170\3\0\2\170\77\0\3\3\1\73"+
    "\3\3\1\73\12\0\5\3\6\0\31\3\2\0\12\3"+
    "\6\0\10\3\12\0\5\3\6\0\11\3\1\172\14\3"+
    "\1\173\2\3\2\0\12\3\6\0\10\3\12\0\5\3"+
    "\6\0\17\3\1\174\11\3\2\0\12\3\5\0\14\76"+
    "\1\175\1\176\72\76\13\77\1\0\2\77\1\177\71\77"+
    "\1\0\10\3\12\0\5\3\6\0\23\3\1\200\5\3"+
    "\2\0\12\3\6\0\10\3\12\0\2\3\1\201\2\3"+
    "\6\0\31\3\2\0\12\3\6\0\1\3\1\202\6\3"+
    "\12\0\5\3\6\0\31\3\2\0\12\3\6\0\10\3"+
    "\12\0\5\3\6\0\10\3\1\203\20\3\2\0\12\3"+
    "\6\0\10\3\12\0\4\3\1\204\6\0\10\3\1\205"+
    "\20\3\2\0\12\3\6\0\10\3\12\0\5\3\6\0"+
    "\6\3\1\206\22\3\2\0\12\3\6\0\10\3\12\0"+
    "\1\207\4\3\6\0\31\3\2\0\12\3\6\0\10\3"+
    "\12\0\5\3\6\0\5\3\1\210\23\3\2\0\12\3"+
    "\6\0\10\3\12\0\5\3\6\0\27\3\1\211\1\3"+
    "\2\0\12\3\6\0\10\3\12\0\3\3\1\212\1\3"+
    "\6\0\10\3\1\213\20\3\2\0\12\3\6\0\10\3"+
    "\12\0\5\3\6\0\24\3\1\214\4\3\2\0\12\3"+
    "\6\0\10\3\12\0\3\3\1\215\1\3\6\0\31\3"+
    "\2\0\12\3\6\0\10\3\12\0\5\3\6\0\13\3"+
    "\1\216\3\3\1\217\11\3\2\0\12\3\44\0\1\220"+
    "\123\0\1\221\35\0\10\3\12\0\5\3\6\0\15\3"+
    "\1\222\13\3\2\0\2\3\1\223\7\3\6\0\10\3"+
    "\12\0\5\3\6\0\1\3\1\224\27\3\2\0\12\3"+
    "\6\0\10\3\12\0\5\3\6\0\31\3\2\0\4\3"+
    "\1\225\5\3\6\0\10\3\12\0\5\3\6\0\6\3"+
    "\1\226\3\3\1\227\10\3\1\230\3\3\1\231\1\3"+
    "\2\0\12\3\6\0\10\3\12\0\5\3\6\0\5\3"+
    "\1\232\2\3\1\233\20\3\2\0\12\3\6\0\10\3"+
    "\12\0\5\3\6\0\12\3\1\234\16\3\2\0\12\3"+
    "\6\0\10\3\12\0\5\3\6\0\10\3\1\235\20\3"+
    "\2\0\12\3\6\0\10\3\12\0\3\3\1\236\1\3"+
    "\6\0\31\3\2\0\12\3\6\0\10\3\12\0\3\3"+
    "\1\237\1\3\6\0\31\3\2\0\12\3\6\0\10\3"+
    "\12\0\4\3\1\240\6\0\31\3\2\0\12\3\6\0"+
    "\10\3\12\0\1\241\4\3\6\0\31\3\2\0\12\3"+
    "\6\0\10\3\12\0\5\3\6\0\6\3\1\242\22\3"+
    "\2\0\12\3\6\0\10\3\12\0\3\3\1\243\1\3"+
    "\6\0\7\3\1\244\21\3\2\0\12\3\6\0\10\3"+
    "\12\0\5\3\6\0\25\3\1\245\3\3\2\0\12\3"+
    "\6\0\10\3\12\0\5\3\6\0\10\3\1\246\20\3"+
    "\2\0\12\3\6\0\10\3\12\0\5\3\6\0\17\3"+
    "\1\247\11\3\2\0\12\3\6\0\10\3\12\0\5\3"+
    "\6\0\10\3\1\250\20\3\2\0\12\3\6\0\10\3"+
    "\12\0\5\3\6\0\13\3\1\251\15\3\2\0\12\3"+
    "\6\0\10\3\12\0\5\3\6\0\10\3\1\252\20\3"+
    "\2\0\12\3\6\0\10\3\12\0\5\3\6\0\21\3"+
    "\1\253\7\3\2\0\12\3\6\0\10\3\12\0\5\3"+
    "\6\0\17\3\1\254\3\3\1\255\5\3\2\0\12\3"+
    "\6\0\4\3\1\254\3\3\12\0\3\3\1\256\1\3"+
    "\6\0\6\3\1\257\15\3\1\260\4\3\2\0\12\3"+
    "\6\0\10\3\12\0\5\3\6\0\6\3\1\261\22\3"+
    "\2\0\12\3\6\0\10\3\12\0\5\3\6\0\13\3"+
    "\1\262\15\3\2\0\12\3\6\0\10\3\12\0\5\3"+
    "\6\0\20\3\1\263\10\3\2\0\12\3\6\0\10\3"+
    "\12\0\5\3\6\0\10\3\1\264\14\3\1\265\3\3"+
    "\2\0\12\3\6\0\10\3\12\0\5\3\6\0\13\3"+
    "\1\266\15\3\2\0\12\3\6\0\10\3\12\0\5\3"+
    "\6\0\5\3\1\267\23\3\2\0\12\3\6\0\10\3"+
    "\12\0\5\3\6\0\31\3\2\0\2\3\1\270\7\3"+
    "\6\0\10\3\12\0\5\3\6\0\31\3\2\0\4\3"+
    "\1\271\5\3\6\0\10\3\12\0\5\3\6\0\31\3"+
    "\2\0\4\3\1\272\5\3\6\0\10\3\12\0\5\3"+
    "\6\0\31\3\2\0\11\3\1\273\6\0\10\3\12\0"+
    "\5\3\6\0\1\274\30\3\2\0\3\3\1\275\6\3"+
    "\6\0\10\3\12\0\5\3\6\0\1\3\1\276\27\3"+
    "\2\0\12\3\6\0\10\3\12\0\5\3\6\0\31\3"+
    "\2\0\7\3\1\277\2\3\10\0\1\4\1\300\3\0"+
    "\1\300\1\301\102\0\1\301\3\0\2\301\77\0\10\3"+
    "\12\0\5\3\6\0\12\3\1\302\16\3\2\0\12\3"+
    "\6\0\10\3\12\0\5\3\6\0\20\3\1\303\10\3"+
    "\2\0\12\3\6\0\10\3\12\0\1\304\4\3\6\0"+
    "\31\3\2\0\12\3\21\0\2\175\105\0\1\305\75\0"+
    "\1\3\1\306\6\3\12\0\5\3\6\0\31\3\2\0"+
    "\12\3\6\0\10\3\12\0\3\3\1\307\1\3\6\0"+
    "\31\3\2\0\12\3\6\0\6\3\1\310\1\3\12\0"+
    "\1\311\3\3\1\312\6\0\5\3\1\313\1\314\1\3"+
    "\1\315\7\3\1\316\3\3\1\317\1\3\1\51\2\3"+
    "\2\0\12\3\6\0\10\3\12\0\5\3\6\0\12\3"+
    "\1\123\16\3\2\0\12\3\6\0\10\3\12\0\1\3"+
    "\1\320\3\3\6\0\31\3\2\0\12\3\6\0\10\3"+
    "\12\0\1\3\1\321\3\3\6\0\31\3\2\0\12\3"+
    "\6\0\10\3\12\0\1\3\1\115\3\3\6\0\31\3"+
    "\2\0\12\3\6\0\10\3\12\0\5\3\6\0\26\3"+
    "\1\322\2\3\2\0\12\3\6\0\10\3\12\0\5\3"+
    "\6\0\13\3\1\323\15\3\2\0\12\3\6\0\10\3"+
    "\12\0\5\3\6\0\10\3\1\324\20\3\2\0\12\3"+
    "\6\0\10\3\12\0\1\3\1\325\3\3\6\0\31\3"+
    "\2\0\12\3\6\0\10\3\12\0\5\3\6\0\20\3"+
    "\1\326\10\3\2\0\12\3\6\0\10\3\12\0\5\3"+
    "\6\0\10\3\1\327\20\3\2\0\12\3\6\0\10\3"+
    "\12\0\5\3\6\0\13\3\1\210\15\3\2\0\12\3"+
    "\6\0\10\3\12\0\5\3\6\0\17\3\1\330\11\3"+
    "\2\0\12\3\45\0\1\331\107\0\1\332\50\0\10\3"+
    "\12\0\5\3\6\0\4\3\1\333\24\3\2\0\12\3"+
    "\6\0\10\3\12\0\5\3\6\0\1\3\1\334\27\3"+
    "\2\0\12\3\6\0\10\3\12\0\5\3\6\0\16\3"+
    "\1\123\12\3\2\0\12\3\6\0\10\3\12\0\5\3"+
    "\6\0\4\3\1\123\24\3\2\0\12\3\6\0\10\3"+
    "\12\0\1\3\1\335\3\3\6\0\31\3\2\0\12\3"+
    "\6\0\10\3\12\0\1\115\4\3\6\0\31\3\2\0"+
    "\12\3\6\0\10\3\12\0\3\3\1\336\1\3\6\0"+
    "\31\3\2\0\12\3\6\0\10\3\12\0\5\3\6\0"+
    "\22\3\1\337\6\3\2\0\12\3\6\0\10\3\12\0"+
    "\2\3\1\340\2\3\6\0\31\3\2\0\12\3\6\0"+
    "\1\3\1\341\6\3\12\0\5\3\6\0\12\3\1\342"+
    "\16\3\2\0\12\3\6\0\10\3\12\0\5\3\6\0"+
    "\5\3\1\343\2\3\1\344\20\3\2\0\12\3\6\0"+
    "\10\3\12\0\5\3\6\0\11\3\1\115\17\3\2\0"+
    "\12\3\6\0\10\3\12\0\5\3\6\0\10\3\1\206"+
    "\20\3\2\0\12\3\6\0\10\3\12\0\5\3\6\0"+
    "\10\3\1\345\20\3\2\0\12\3\6\0\1\3\1\346"+
    "\6\3\12\0\5\3\6\0\31\3\2\0\12\3\6\0"+
    "\6\3\1\347\1\3\12\0\1\3\1\350\2\3\1\351"+
    "\6\0\5\3\1\352\1\3\1\353\14\3\1\354\4\3"+
    "\2\0\12\3\6\0\10\3\12\0\3\3\1\355\1\3"+
    "\6\0\31\3\2\0\12\3\6\0\10\3\12\0\5\3"+
    "\6\0\12\3\1\356\16\3\2\0\12\3\6\0\10\3"+
    "\12\0\5\3\6\0\12\3\1\357\16\3\2\0\12\3"+
    "\6\0\10\3\12\0\2\3\1\360\2\3\6\0\31\3"+
    "\2\0\12\3\6\0\10\3\12\0\1\3\1\111\3\3"+
    "\6\0\31\3\2\0\12\3\6\0\10\3\12\0\5\3"+
    "\6\0\23\3\1\361\5\3\2\0\12\3\6\0\10\3"+
    "\12\0\1\3\1\362\3\3\6\0\31\3\2\0\12\3"+
    "\6\0\10\3\12\0\5\3\6\0\26\3\1\115\2\3"+
    "\2\0\12\3\6\0\10\3\12\0\5\3\6\0\11\3"+
    "\1\363\17\3\2\0\12\3\6\0\10\3\12\0\5\3"+
    "\6\0\20\3\1\364\10\3\2\0\12\3\6\0\10\3"+
    "\12\0\1\365\4\3\6\0\31\3\2\0\12\3\6\0"+
    "\10\3\12\0\5\3\6\0\11\3\1\261\17\3\2\0"+
    "\12\3\6\0\10\3\12\0\5\3\6\0\17\3\1\210"+
    "\11\3\2\0\12\3\6\0\10\3\12\0\5\3\6\0"+
    "\30\3\1\115\2\0\12\3\6\0\10\3\12\0\5\3"+
    "\6\0\24\3\1\366\4\3\2\0\12\3\6\0\10\3"+
    "\12\0\5\3\6\0\10\3\1\210\20\3\2\0\12\3"+
    "\6\0\10\3\12\0\3\3\1\367\1\3\6\0\31\3"+
    "\2\0\12\3\6\0\6\3\1\370\1\3\12\0\5\3"+
    "\6\0\31\3\2\0\12\3\6\0\10\3\12\0\5\3"+
    "\6\0\10\3\1\371\20\3\2\0\12\3\6\0\10\3"+
    "\12\0\5\3\6\0\13\3\1\372\15\3\2\0\12\3"+
    "\6\0\10\3\12\0\5\3\6\0\13\3\1\373\15\3"+
    "\2\0\12\3\6\0\10\3\12\0\5\3\6\0\21\3"+
    "\1\374\7\3\2\0\12\3\6\0\10\3\12\0\5\3"+
    "\6\0\16\3\1\375\12\3\2\0\12\3\6\0\10\3"+
    "\12\0\5\3\6\0\31\3\2\0\5\3\1\376\4\3"+
    "\6\0\10\3\12\0\5\3\6\0\31\3\2\0\5\3"+
    "\1\123\4\3\6\0\10\3\12\0\5\3\6\0\31\3"+
    "\2\0\5\3\1\377\4\3\6\0\10\3\12\0\5\3"+
    "\6\0\1\3\1\u0100\27\3\2\0\12\3\6\0\10\3"+
    "\12\0\5\3\6\0\1\u0101\30\3\2\0\12\3\6\0"+
    "\10\3\12\0\5\3\6\0\31\3\2\0\6\3\1\123"+
    "\3\3\6\0\10\3\12\0\5\3\6\0\2\3\1\u0102"+
    "\26\3\2\0\12\3\10\0\1\4\1\u0103\3\0\1\u0103"+
    "\1\u0104\102\0\1\u0104\3\0\2\u0104\77\0\10\3\12\0"+
    "\2\3\1\u0105\2\3\6\0\31\3\2\0\12\3\6\0"+
    "\10\3\12\0\5\3\6\0\5\3\1\u0106\23\3\2\0"+
    "\12\3\6\0\10\3\12\0\3\3\1\u0107\1\3\6\0"+
    "\31\3\2\0\5\3\1\u0108\4\3\6\0\10\3\12\0"+
    "\5\3\6\0\24\3\1\u0109\4\3\2\0\12\3\6\0"+
    "\10\3\12\0\4\3\1\u0106\6\0\31\3\2\0\12\3"+
    "\6\0\10\3\12\0\5\3\6\0\22\3\1\u010a\6\3"+
    "\2\0\12\3\6\0\10\3\12\0\5\3\6\0\5\3"+
    "\1\u010b\23\3\2\0\12\3\6\0\10\3\12\0\5\3"+
    "\6\0\13\3\1\u010c\15\3\2\0\12\3\6\0\10\3"+
    "\12\0\1\3\1\u010d\3\3\6\0\31\3\2\0\12\3"+
    "\6\0\10\3\12\0\1\3\1\u010e\2\3\1\u010f\6\0"+
    "\31\3\2\0\12\3\6\0\10\3\12\0\5\3\6\0"+
    "\13\3\1\u0110\15\3\2\0\12\3\6\0\10\3\12\0"+
    "\5\3\6\0\6\3\1\u0111\22\3\2\0\12\3\6\0"+
    "\10\3\12\0\5\3\6\0\12\3\1\u0112\16\3\2\0"+
    "\12\3\6\0\10\3\12\0\5\3\6\0\24\3\1\u0113"+
    "\4\3\2\0\12\3\6\0\10\3\12\0\5\3\6\0"+
    "\5\3\1\u0114\23\3\2\0\12\3\6\0\10\3\12\0"+
    "\3\3\1\u0115\1\3\6\0\31\3\2\0\12\3\6\0"+
    "\10\3\12\0\3\3\1\u0116\1\3\6\0\31\3\2\0"+
    "\12\3\6\0\10\3\12\0\3\3\1\370\1\3\6\0"+
    "\31\3\2\0\12\3\6\0\10\3\12\0\5\3\6\0"+
    "\5\3\1\u0117\23\3\2\0\12\3\6\0\10\3\12\0"+
    "\5\3\6\0\5\3\1\261\23\3\2\0\12\3\6\0"+
    "\10\3\12\0\3\3\1\u0118\1\3\6\0\31\3\2\0"+
    "\12\3\6\0\10\3\12\0\5\3\6\0\20\3\1\261"+
    "\10\3\2\0\12\3\44\0\1\u0119\124\0\1\67\34\0"+
    "\10\3\12\0\5\3\6\0\31\3\2\0\1\3\1\u011a"+
    "\10\3\6\0\10\3\12\0\5\3\6\0\15\3\1\277"+
    "\13\3\2\0\12\3\6\0\10\3\12\0\5\3\6\0"+
    "\5\3\1\u011b\23\3\2\0\12\3\6\0\10\3\12\0"+
    "\5\3\6\0\6\3\1\141\22\3\2\0\12\3\6\0"+
    "\10\3\12\0\3\3\1\u011c\1\3\6\0\31\3\2\0"+
    "\12\3\6\0\10\3\12\0\3\3\1\u011d\1\3\6\0"+
    "\31\3\2\0\12\3\6\0\6\3\1\u011e\1\3\12\0"+
    "\1\3\1\u011f\3\3\6\0\10\3\1\u0120\1\3\1\u0121"+
    "\16\3\2\0\12\3\6\0\10\3\12\0\1\u0122\3\3"+
    "\1\u0123\6\0\31\3\2\0\12\3\6\0\10\3\12\0"+
    "\5\3\6\0\10\3\1\u0124\20\3\2\0\12\3\6\0"+
    "\10\3\12\0\1\3\1\210\3\3\6\0\22\3\1\u0125"+
    "\6\3\2\0\12\3\6\0\1\3\1\u0126\6\3\12\0"+
    "\5\3\6\0\31\3\2\0\12\3\6\0\10\3\12\0"+
    "\5\3\6\0\12\3\1\u0127\16\3\2\0\12\3\6\0"+
    "\10\3\12\0\1\3\1\u0128\3\3\6\0\31\3\2\0"+
    "\12\3\6\0\4\3\1\u0129\3\3\12\0\5\3\6\0"+
    "\17\3\1\u012a\11\3\2\0\12\3\6\0\10\3\12\0"+
    "\5\3\6\0\20\3\1\u012b\10\3\2\0\12\3\6\0"+
    "\10\3\12\0\1\3\1\u012c\3\3\6\0\31\3\2\0"+
    "\12\3\6\0\10\3\12\0\5\3\6\0\5\3\1\u012d"+
    "\23\3\2\0\12\3\6\0\10\3\12\0\5\3\6\0"+
    "\5\3\1\u012e\23\3\2\0\12\3\6\0\10\3\12\0"+
    "\5\3\6\0\23\3\1\u012f\5\3\2\0\12\3\6\0"+
    "\10\3\12\0\5\3\6\0\6\3\1\210\22\3\2\0"+
    "\12\3\6\0\10\3\12\0\5\3\6\0\25\3\1\u0130"+
    "\3\3\2\0\12\3\6\0\10\3\12\0\5\3\6\0"+
    "\12\3\1\u0131\16\3\2\0\12\3\6\0\10\3\12\0"+
    "\5\3\6\0\10\3\1\u0132\20\3\2\0\12\3\6\0"+
    "\10\3\12\0\5\3\6\0\5\3\1\u0133\23\3\2\0"+
    "\12\3\6\0\10\3\12\0\5\3\6\0\20\3\1\u0134"+
    "\10\3\2\0\12\3\6\0\10\3\12\0\5\3\6\0"+
    "\5\3\1\u0135\23\3\2\0\12\3\6\0\10\3\12\0"+
    "\1\3\1\u0136\3\3\6\0\31\3\2\0\12\3\6\0"+
    "\10\3\12\0\3\3\1\u0137\1\3\6\0\31\3\2\0"+
    "\12\3\6\0\10\3\12\0\5\3\6\0\17\3\1\u0138"+
    "\11\3\2\0\12\3\6\0\10\3\12\0\5\3\6\0"+
    "\12\3\1\u0139\16\3\2\0\12\3\6\0\10\3\12\0"+
    "\1\3\1\u013a\3\3\6\0\31\3\2\0\12\3\6\0"+
    "\10\3\12\0\5\3\6\0\20\3\1\u013b\10\3\2\0"+
    "\12\3\6\0\10\3\12\0\3\3\1\u013c\1\3\6\0"+
    "\31\3\2\0\12\3\6\0\10\3\12\0\5\3\6\0"+
    "\12\3\1\261\16\3\2\0\12\3\6\0\10\3\12\0"+
    "\5\3\6\0\1\u013d\30\3\2\0\3\3\1\u013e\6\3"+
    "\6\0\10\3\12\0\5\3\6\0\1\3\1\333\27\3"+
    "\2\0\12\3\6\0\10\3\12\0\5\3\6\0\31\3"+
    "\2\0\2\3\1\123\7\3\6\0\10\3\12\0\5\3"+
    "\6\0\15\3\1\u013f\13\3\2\0\12\3\6\0\10\3"+
    "\12\0\5\3\6\0\31\3\2\0\4\3\1\u0140\5\3"+
    "\6\0\10\3\12\0\5\3\6\0\1\3\1\123\27\3"+
    "\2\0\12\3\10\0\1\4\1\u0141\3\0\1\u0141\1\u0142"+
    "\102\0\1\u0142\3\0\2\u0142\77\0\10\3\12\0\3\3"+
    "\1\u0143\1\3\6\0\31\3\2\0\12\3\6\0\10\3"+
    "\12\0\1\3\1\210\3\3\6\0\31\3\2\0\12\3"+
    "\6\0\10\3\12\0\5\3\6\0\17\3\1\u0144\11\3"+
    "\2\0\12\3\6\0\10\3\12\0\5\3\6\0\20\3"+
    "\1\210\10\3\2\0\12\3\6\0\10\3\12\0\5\3"+
    "\6\0\5\3\1\u0145\23\3\2\0\12\3\6\0\10\3"+
    "\12\0\5\3\6\0\26\3\1\u0146\2\3\2\0\12\3"+
    "\6\0\10\3\12\0\2\3\1\u0147\2\3\6\0\31\3"+
    "\2\0\12\3\6\0\10\3\12\0\5\3\6\0\30\3"+
    "\1\u0148\2\0\12\3\6\0\10\3\12\0\5\3\6\0"+
    "\23\3\1\u0149\5\3\2\0\12\3\6\0\10\3\12\0"+
    "\5\3\6\0\5\3\1\103\23\3\2\0\12\3\6\0"+
    "\10\3\12\0\5\3\6\0\21\3\1\u014a\7\3\2\0"+
    "\12\3\6\0\10\3\12\0\5\3\6\0\21\3\1\u014b"+
    "\7\3\2\0\12\3\6\0\1\3\1\u014c\6\3\12\0"+
    "\5\3\6\0\31\3\2\0\12\3\6\0\10\3\12\0"+
    "\5\3\6\0\10\3\1\264\20\3\2\0\12\3\6\0"+
    "\10\3\12\0\5\3\6\0\10\3\1\u014d\20\3\2\0"+
    "\12\3\6\0\10\3\12\0\5\3\6\0\17\3\1\u014e"+
    "\11\3\2\0\12\3\6\0\10\3\12\0\1\3\1\u014f"+
    "\3\3\6\0\31\3\2\0\12\3\6\0\10\3\12\0"+
    "\5\3\6\0\17\3\1\u0106\11\3\2\0\12\3\6\0"+
    "\10\3\12\0\5\3\6\0\5\3\1\u0150\11\3\1\u014e"+
    "\11\3\2\0\12\3\6\0\10\3\12\0\4\3\1\u0151"+
    "\6\0\31\3\2\0\12\3\43\0\1\u0152\52\0\10\3"+
    "\12\0\5\3\6\0\31\3\2\0\6\3\1\u0153\3\3"+
    "\6\0\10\3\12\0\2\3\1\u0154\2\3\6\0\31\3"+
    "\2\0\12\3\6\0\10\3\12\0\5\3\6\0\5\3"+
    "\1\u0155\23\3\2\0\12\3\6\0\10\3\12\0\4\3"+
    "\1\u0156\6\0\31\3\2\0\12\3\6\0\10\3\12\0"+
    "\1\3\1\u0157\3\3\6\0\31\3\2\0\12\3\6\0"+
    "\4\3\1\u0158\3\3\12\0\5\3\6\0\31\3\2\0"+
    "\12\3\6\0\10\3\12\0\1\3\1\u0159\3\3\6\0"+
    "\31\3\2\0\12\3\6\0\10\3\12\0\1\u0122\4\3"+
    "\6\0\31\3\2\0\12\3\6\0\10\3\12\0\1\u015a"+
    "\4\3\6\0\31\3\2\0\12\3\6\0\10\3\12\0"+
    "\5\3\6\0\10\3\1\u015b\20\3\2\0\12\3\6\0"+
    "\10\3\12\0\5\3\6\0\22\3\1\u015c\3\3\1\322"+
    "\2\3\2\0\12\3\6\0\10\3\12\0\5\3\6\0"+
    "\6\3\1\207\22\3\2\0\12\3\6\0\10\3\12\0"+
    "\5\3\6\0\6\3\1\u015d\22\3\2\0\12\3\6\0"+
    "\10\3\12\0\5\3\6\0\17\3\1\140\11\3\2\0"+
    "\12\3\6\0\10\3\12\0\5\3\6\0\11\3\1\u015e"+
    "\17\3\2\0\12\3\6\0\10\3\12\0\3\3\1\u015f"+
    "\1\3\6\0\31\3\2\0\12\3\6\0\10\3\12\0"+
    "\5\3\6\0\10\3\1\u0160\20\3\2\0\12\3\6\0"+
    "\10\3\12\0\5\3\6\0\17\3\1\u0161\11\3\2\0"+
    "\12\3\6\0\10\3\12\0\5\3\6\0\6\3\1\u0162"+
    "\3\3\1\u0163\14\3\1\u0164\1\3\2\0\12\3\6\0"+
    "\10\3\12\0\3\3\1\u0165\1\3\6\0\31\3\2\0"+
    "\12\3\6\0\10\3\12\0\5\3\6\0\20\3\1\u0166"+
    "\10\3\2\0\12\3\6\0\10\3\12\0\5\3\6\0"+
    "\17\3\1\u0167\11\3\2\0\12\3\6\0\10\3\12\0"+
    "\5\3\6\0\6\3\1\u0168\22\3\2\0\12\3\6\0"+
    "\10\3\12\0\5\3\6\0\13\3\1\u0169\15\3\2\0"+
    "\12\3\6\0\10\3\12\0\5\3\6\0\11\3\1\207"+
    "\17\3\2\0\12\3\6\0\10\3\12\0\5\3\6\0"+
    "\12\3\1\u016a\16\3\2\0\12\3\6\0\10\3\12\0"+
    "\5\3\6\0\5\3\1\u016b\1\u016c\22\3\2\0\12\3"+
    "\6\0\10\3\12\0\5\3\6\0\25\3\1\210\3\3"+
    "\2\0\12\3\6\0\10\3\12\0\5\3\6\0\13\3"+
    "\1\u016d\15\3\2\0\12\3\6\0\10\3\12\0\5\3"+
    "\6\0\17\3\1\u016e\11\3\2\0\12\3\6\0\10\3"+
    "\12\0\5\3\6\0\22\3\1\u016f\6\3\2\0\12\3"+
    "\6\0\10\3\12\0\5\3\6\0\13\3\1\u0170\15\3"+
    "\2\0\12\3\6\0\10\3\12\0\5\3\6\0\5\3"+
    "\1\256\23\3\2\0\12\3\6\0\10\3\12\0\5\3"+
    "\6\0\12\3\1\110\16\3\2\0\12\3\6\0\10\3"+
    "\12\0\5\3\6\0\17\3\1\u0171\11\3\2\0\12\3"+
    "\6\0\10\3\12\0\5\3\6\0\1\3\1\u0172\27\3"+
    "\2\0\12\3\6\0\10\3\12\0\5\3\6\0\1\u0173"+
    "\30\3\2\0\12\3\6\0\10\3\12\0\5\3\6\0"+
    "\4\3\1\u0174\24\3\2\0\12\3\6\0\10\3\12\0"+
    "\5\3\6\0\31\3\2\0\5\3\1\u0175\4\3\10\0"+
    "\1\4\1\u0176\3\0\1\u0176\1\u0177\102\0\1\u0177\3\0"+
    "\2\u0177\77\0\10\3\12\0\5\3\6\0\20\3\1\u0178"+
    "\10\3\2\0\12\3\6\0\10\3\12\0\5\3\6\0"+
    "\23\3\1\356\5\3\2\0\12\3\6\0\10\3\12\0"+
    "\3\3\1\u0179\1\3\6\0\31\3\2\0\12\3\6\0"+
    "\10\3\12\0\5\3\6\0\26\3\1\u017a\2\3\2\0"+
    "\12\3\6\0\1\3\1\u017b\6\3\12\0\5\3\6\0"+
    "\31\3\2\0\12\3\6\0\1\3\1\u017c\6\3\12\0"+
    "\5\3\6\0\31\3\2\0\12\3\6\0\10\3\12\0"+
    "\5\3\6\0\13\3\1\u014b\15\3\2\0\12\3\6\0"+
    "\1\3\1\u017d\6\3\12\0\5\3\6\0\31\3\2\0"+
    "\12\3\6\0\10\3\12\0\5\3\6\0\21\3\1\u017e"+
    "\7\3\2\0\12\3\6\0\10\3\12\0\3\3\1\u017f"+
    "\1\3\6\0\31\3\2\0\12\3\6\0\10\3\12\0"+
    "\5\3\6\0\12\3\1\216\16\3\2\0\12\3\6\0"+
    "\10\3\12\0\5\3\6\0\13\3\1\227\15\3\2\0"+
    "\12\3\6\0\10\3\12\0\5\3\6\0\22\3\1\u0180"+
    "\6\3\2\0\12\3\6\0\10\3\12\0\5\3\6\0"+
    "\12\3\1\u0181\16\3\2\0\12\3\46\0\1\u0182\47\0"+
    "\10\3\12\0\5\3\6\0\31\3\2\0\5\3\1\u0183"+
    "\4\3\6\0\10\3\12\0\1\3\1\227\3\3\6\0"+
    "\31\3\2\0\12\3\6\0\10\3\12\0\1\3\1\u0184"+
    "\3\3\6\0\31\3\2\0\12\3\6\0\10\3\12\0"+
    "\1\3\1\u0185\3\3\6\0\31\3\2\0\12\3\6\0"+
    "\10\3\12\0\5\3\6\0\11\3\1\172\17\3\2\0"+
    "\12\3\6\0\10\3\12\0\4\3\1\u0186\6\0\31\3"+
    "\2\0\12\3\6\0\10\3\12\0\5\3\6\0\21\3"+
    "\1\u0187\7\3\2\0\12\3\6\0\10\3\12\0\5\3"+
    "\6\0\5\3\1\u0188\23\3\2\0\12\3\6\0\10\3"+
    "\12\0\3\3\1\u0189\1\3\6\0\31\3\2\0\12\3"+
    "\6\0\10\3\12\0\5\3\6\0\24\3\1\115\4\3"+
    "\2\0\12\3\6\0\10\3\12\0\5\3\6\0\10\3"+
    "\1\u018a\20\3\2\0\12\3\6\0\10\3\12\0\5\3"+
    "\6\0\12\3\1\u018b\16\3\2\0\12\3\6\0\10\3"+
    "\12\0\5\3\6\0\10\3\1\u018c\20\3\2\0\12\3"+
    "\6\0\10\3\12\0\5\3\6\0\5\3\1\u018d\23\3"+
    "\2\0\12\3\6\0\10\3\12\0\5\3\6\0\6\3"+
    "\1\u018e\22\3\2\0\12\3\6\0\10\3\12\0\5\3"+
    "\6\0\6\3\1\123\22\3\2\0\12\3\6\0\10\3"+
    "\12\0\1\u018f\4\3\6\0\31\3\2\0\12\3\6\0"+
    "\10\3\12\0\5\3\6\0\22\3\1\u0190\6\3\2\0"+
    "\12\3\6\0\10\3\12\0\5\3\6\0\10\3\1\u0191"+
    "\20\3\2\0\12\3\6\0\10\3\12\0\5\3\6\0"+
    "\24\3\1\u0192\4\3\2\0\12\3\6\0\10\3\12\0"+
    "\5\3\6\0\6\3\1\115\22\3\2\0\12\3\6\0"+
    "\1\3\1\u0193\6\3\12\0\5\3\6\0\31\3\2\0"+
    "\12\3\6\0\10\3\12\0\5\3\6\0\22\3\1\u0106"+
    "\6\3\2\0\12\3\6\0\10\3\12\0\5\3\6\0"+
    "\13\3\1\u0194\15\3\2\0\12\3\6\0\10\3\12\0"+
    "\1\3\1\u0195\3\3\6\0\31\3\2\0\12\3\6\0"+
    "\10\3\12\0\5\3\6\0\10\3\1\u0196\20\3\2\0"+
    "\12\3\6\0\10\3\12\0\5\3\6\0\12\3\1\u0135"+
    "\16\3\2\0\12\3\6\0\10\3\12\0\5\3\6\0"+
    "\23\3\1\210\5\3\2\0\12\3\6\0\4\3\1\210"+
    "\3\3\12\0\5\3\6\0\31\3\2\0\12\3\6\0"+
    "\10\3\12\0\5\3\6\0\6\3\1\u016c\22\3\2\0"+
    "\12\3\6\0\10\3\12\0\5\3\6\0\23\3\1\115"+
    "\5\3\2\0\12\3\6\0\10\3\12\0\5\3\6\0"+
    "\15\3\1\225\13\3\2\0\12\3\6\0\10\3\12\0"+
    "\5\3\6\0\31\3\2\0\4\3\1\u0197\5\3\6\0"+
    "\10\3\12\0\5\3\6\0\1\3\1\u0174\27\3\2\0"+
    "\12\3\10\0\1\4\1\u0198\3\0\1\u0198\1\u0199\102\0"+
    "\1\u0199\3\0\2\u0199\77\0\10\3\12\0\5\3\6\0"+
    "\5\3\1\356\23\3\2\0\12\3\6\0\10\3\12\0"+
    "\5\3\6\0\17\3\1\u019a\11\3\2\0\12\3\6\0"+
    "\10\3\12\0\1\3\1\u019b\3\3\6\0\31\3\2\0"+
    "\12\3\6\0\10\3\12\0\5\3\6\0\21\3\1\u019c"+
    "\7\3\2\0\12\3\6\0\10\3\12\0\5\3\6\0"+
    "\24\3\1\u019d\4\3\2\0\12\3\6\0\10\3\12\0"+
    "\5\3\6\0\24\3\1\u019e\4\3\2\0\12\3\6\0"+
    "\10\3\12\0\5\3\6\0\12\3\1\u019f\16\3\2\0"+
    "\12\3\6\0\10\3\12\0\5\3\6\0\20\3\1\256"+
    "\10\3\2\0\12\3\6\0\10\3\12\0\5\3\6\0"+
    "\24\3\1\u019a\4\3\2\0\12\3\6\0\10\3\12\0"+
    "\5\3\6\0\13\3\1\115\15\3\2\0\12\3\44\0"+
    "\1\u01a0\51\0\10\3\12\0\5\3\6\0\31\3\2\0"+
    "\4\3\1\377\5\3\6\0\10\3\12\0\5\3\6\0"+
    "\6\3\1\u01a1\12\3\1\u01a2\7\3\2\0\12\3\6\0"+
    "\10\3\12\0\5\3\6\0\6\3\1\u01a3\22\3\2\0"+
    "\12\3\6\0\10\3\12\0\1\3\1\u01a4\3\3\6\0"+
    "\31\3\2\0\12\3\6\0\10\3\12\0\5\3\6\0"+
    "\24\3\1\u01a5\4\3\2\0\12\3\6\0\10\3\12\0"+
    "\1\3\1\u01a6\3\3\6\0\31\3\2\0\12\3\6\0"+
    "\10\3\12\0\5\3\6\0\20\3\1\u01a7\10\3\2\0"+
    "\12\3\6\0\10\3\12\0\5\3\6\0\12\3\1\236"+
    "\16\3\2\0\12\3\6\0\10\3\12\0\2\3\1\u01a8"+
    "\2\3\6\0\31\3\2\0\12\3\6\0\10\3\12\0"+
    "\5\3\6\0\24\3\1\u01a9\4\3\2\0\12\3\6\0"+
    "\10\3\12\0\5\3\6\0\25\3\1\u018c\3\3\2\0"+
    "\12\3\6\0\10\3\12\0\5\3\6\0\10\3\1\u01aa"+
    "\20\3\2\0\12\3\6\0\10\3\12\0\5\3\6\0"+
    "\5\3\1\u01ab\23\3\2\0\12\3\6\0\10\3\12\0"+
    "\3\3\1\u01ac\1\3\6\0\31\3\2\0\12\3\6\0"+
    "\10\3\12\0\1\3\1\u018f\3\3\6\0\31\3\2\0"+
    "\12\3\6\0\10\3\12\0\1\3\1\u01ad\3\3\6\0"+
    "\31\3\2\0\12\3\6\0\10\3\12\0\5\3\6\0"+
    "\5\3\1\u01ae\23\3\2\0\12\3\6\0\1\3\1\u01af"+
    "\6\3\12\0\5\3\6\0\31\3\2\0\12\3\6\0"+
    "\10\3\12\0\5\3\6\0\23\3\1\u014d\5\3\2\0"+
    "\12\3\6\0\10\3\12\0\5\3\6\0\12\3\1\u01b0"+
    "\16\3\2\0\12\3\6\0\10\3\12\0\5\3\6\0"+
    "\31\3\2\0\5\3\1\u0102\4\3\10\0\1\4\1\u01b1"+
    "\3\0\1\u01b1\1\u01b2\102\0\1\u01b2\3\0\2\u01b2\77\0"+
    "\10\3\12\0\5\3\6\0\10\3\1\115\20\3\2\0"+
    "\12\3\6\0\10\3\12\0\5\3\6\0\5\3\1\115"+
    "\23\3\2\0\12\3\6\0\10\3\12\0\5\3\6\0"+
    "\12\3\1\u015c\16\3\2\0\12\3\6\0\10\3\12\0"+
    "\5\3\6\0\20\3\1\u01b3\10\3\2\0\12\3\6\0"+
    "\10\3\12\0\5\3\6\0\20\3\1\u01b4\10\3\2\0"+
    "\12\3\6\0\10\3\12\0\5\3\6\0\24\3\1\210"+
    "\4\3\2\0\12\3\47\0\1\67\46\0\1\3\1\u01b5"+
    "\6\3\12\0\5\3\6\0\31\3\2\0\12\3\6\0"+
    "\10\3\12\0\1\3\1\u01b6\3\3\6\0\31\3\2\0"+
    "\12\3\6\0\1\3\1\u01b7\6\3\12\0\5\3\6\0"+
    "\31\3\2\0\12\3\6\0\10\3\12\0\5\3\6\0"+
    "\24\3\1\u0123\4\3\2\0\12\3\6\0\10\3\12\0"+
    "\5\3\6\0\20\3\1\u01b8\10\3\2\0\12\3\6\0"+
    "\10\3\12\0\5\3\6\0\6\3\1\356\22\3\2\0"+
    "\12\3\6\0\10\3\12\0\5\3\6\0\17\3\1\356"+
    "\11\3\2\0\12\3\6\0\10\3\12\0\3\3\1\u01b9"+
    "\1\3\6\0\31\3\2\0\12\3\6\0\10\3\12\0"+
    "\5\3\6\0\20\3\1\u0145\10\3\2\0\12\3\6\0"+
    "\10\3\12\0\5\3\6\0\5\3\1\u01ba\23\3\2\0"+
    "\12\3\6\0\10\3\12\0\1\3\1\u01bb\3\3\6\0"+
    "\31\3\2\0\12\3\6\0\10\3\12\0\5\3\6\0"+
    "\5\3\1\u01bc\23\3\2\0\12\3\6\0\10\3\12\0"+
    "\5\3\6\0\5\3\1\u01bd\23\3\2\0\12\3\6\0"+
    "\10\3\12\0\1\3\1\u01be\3\3\6\0\31\3\2\0"+
    "\12\3\6\0\10\3\12\0\5\3\6\0\13\3\1\u01bf"+
    "\15\3\2\0\12\3\6\0\10\3\12\0\5\3\6\0"+
    "\10\3\1\u0106\20\3\2\0\12\3\10\0\1\4\1\u01c0"+
    "\3\0\1\u01c0\1\u01c1\102\0\1\u01c1\3\0\2\u01c1\77\0"+
    "\10\3\12\0\5\3\6\0\5\3\1\u01c2\23\3\2\0"+
    "\12\3\6\0\10\3\12\0\5\3\6\0\5\3\1\u019a"+
    "\23\3\2\0\12\3\6\0\10\3\12\0\5\3\6\0"+
    "\12\3\1\u01c3\5\3\1\111\10\3\2\0\12\3\6\0"+
    "\10\3\12\0\5\3\6\0\17\3\1\261\11\3\2\0"+
    "\12\3\6\0\10\3\12\0\5\3\6\0\10\3\1\u0120"+
    "\20\3\2\0\12\3\6\0\10\3\12\0\5\3\6\0"+
    "\5\3\1\u01c4\23\3\2\0\12\3\6\0\10\3\12\0"+
    "\5\3\6\0\20\3\1\u019b\10\3\2\0\12\3\6\0"+
    "\10\3\12\0\5\3\6\0\12\3\1\u01c5\16\3\2\0"+
    "\12\3\6\0\10\3\12\0\5\3\6\0\27\3\1\u0164"+
    "\1\3\2\0\12\3\6\0\10\3\12\0\1\3\1\u01c6"+
    "\3\3\6\0\31\3\2\0\12\3\6\0\10\3\12\0"+
    "\5\3\6\0\10\3\1\u01c7\20\3\2\0\12\3\6\0"+
    "\10\3\12\0\5\3\6\0\27\3\1\u01c8\1\3\2\0"+
    "\12\3\6\0\10\3\12\0\5\3\6\0\10\3\1\144"+
    "\20\3\2\0\12\3\10\0\1\4\1\u01c9\3\0\1\u01c9"+
    "\1\u01ca\102\0\1\u01ca\3\0\2\u01ca\77\0\10\3\12\0"+
    "\5\3\6\0\10\3\1\123\20\3\2\0\12\3\6\0"+
    "\10\3\12\0\5\3\6\0\17\3\1\u01cb\11\3\2\0"+
    "\12\3\6\0\10\3\12\0\5\3\6\0\12\3\1\u01cc"+
    "\16\3\2\0\12\3\6\0\10\3\12\0\3\3\1\u01cd"+
    "\1\3\6\0\31\3\2\0\12\3\6\0\10\3\12\0"+
    "\5\3\6\0\21\3\1\u01ce\7\3\2\0\12\3\6\0"+
    "\10\3\12\0\5\3\6\0\25\3\1\115\3\3\2\0"+
    "\12\3\6\0\10\3\12\0\5\3\6\0\22\3\1\u01cf"+
    "\6\3\2\0\12\3\10\0\1\4\1\u01d0\3\0\1\u01d0"+
    "\1\u01d1\102\0\1\u01d1\3\0\2\u01d1\77\0\10\3\12\0"+
    "\1\210\4\3\6\0\31\3\2\0\12\3\6\0\10\3"+
    "\12\0\5\3\6\0\13\3\1\u01d2\15\3\2\0\12\3"+
    "\6\0\10\3\12\0\5\3\6\0\17\3\1\u01d3\11\3"+
    "\2\0\12\3\6\0\10\3\12\0\1\3\1\u0179\3\3"+
    "\6\0\31\3\2\0\12\3\6\0\10\3\12\0\3\3"+
    "\1\u01d4\1\3\6\0\31\3\2\0\12\3\10\0\1\4"+
    "\1\u01d5\3\0\1\u01d5\1\u01d6\102\0\1\u01d6\3\0\2\u01d6"+
    "\77\0\1\3\1\u01d7\6\3\12\0\5\3\6\0\31\3"+
    "\2\0\12\3\6\0\10\3\12\0\5\3\6\0\10\3"+
    "\1\356\20\3\2\0\12\3\6\0\10\3\12\0\5\3"+
    "\6\0\5\3\1\u01d8\23\3\2\0\12\3\10\0\1\4"+
    "\1\u01d9\3\0\1\u01d9\1\u01da\102\0\1\u01da\3\0\2\u01da"+
    "\77\0\10\3\12\0\5\3\6\0\24\3\1\u01db\4\3"+
    "\2\0\12\3\6\0\10\3\12\0\1\3\1\356\3\3"+
    "\6\0\31\3\2\0\12\3\10\0\1\4\1\u01dc\3\0"+
    "\1\u01dc\1\u01dd\102\0\1\u01dd\3\0\2\u01dd\77\0\10\3"+
    "\12\0\5\3\6\0\5\3\1\u01de\23\3\2\0\12\3"+
    "\10\0\1\4\1\u01df\3\0\1\u01df\1\u01e0\102\0\1\u01e0"+
    "\3\0\2\u01e0\77\0\10\3\12\0\5\3\6\0\20\3"+
    "\1\u01e1\10\3\2\0\12\3\10\0\1\4\1\u01e2\3\0"+
    "\1\u01e2\1\u01e3\102\0\1\u01e3\3\0\2\u01e3\77\0\10\3"+
    "\12\0\5\3\6\0\24\3\1\u01e4\4\3\2\0\12\3"+
    "\10\0\1\4\1\u01e5\3\0\1\u01e5\1\u01e6\102\0\1\u01e6"+
    "\3\0\2\u01e6\77\0\10\3\12\0\1\3\1\u01e7\3\3"+
    "\6\0\31\3\2\0\12\3\10\0\1\4\1\u01e8\3\0"+
    "\1\u01e8\1\u01e9\102\0\1\u01e9\3\0\2\u01e9\77\0\10\3"+
    "\12\0\5\3\6\0\5\3\1\u01ea\23\3\2\0\12\3"+
    "\10\0\1\4\1\u01eb\3\0\1\u01eb\1\u01ec\102\0\1\u01ec"+
    "\3\0\2\u01ec\77\0\10\3\12\0\5\3\6\0\10\3"+
    "\1\u01ed\20\3\2\0\12\3\10\0\1\4\1\u01ee\3\0"+
    "\1\u01ee\1\u01ef\102\0\1\u01ef\3\0\2\u01ef\77\0\10\3"+
    "\12\0\3\3\1\u01d8\1\3\6\0\31\3\2\0\12\3"+
    "\10\0\1\4\1\u01f0\3\0\1\u01f0\1\u01f1\102\0\1\u01f1"+
    "\3\0\2\u01f1\101\0\1\4\1\u01f2\3\0\1\u01f2\1\u01f3"+
    "\102\0\1\u01f3\3\0\2\u01f3\101\0\1\4\1\u01f4\3\0"+
    "\1\u01f4\1\u01f5\102\0\1\u01f5\3\0\2\u01f5\101\0\1\4"+
    "\1\u01f6\3\0\1\u01f6\1\u01f7\102\0\1\u01f7\3\0\2\u01f7"+
    "\101\0\1\4\1\u01f8\3\0\1\u01f8\1\u01f9\102\0\1\u01f9"+
    "\3\0\2\u01f9\101\0\1\4\1\u01fa\3\0\1\u01fa\1\u01fb"+
    "\102\0\1\u01fb\3\0\2\u01fb\101\0\1\4\1\u01fc\3\0"+
    "\1\u01fc\1\u01fd\102\0\1\u01fd\3\0\2\u01fd\101\0\1\4"+
    "\1\u01fe\3\0\1\u01fe\1\u01ff\102\0\1\u01ff\3\0\2\u01ff"+
    "\101\0\1\4\1\u0200\3\0\1\u0200\1\u0201\102\0\1\u0201"+
    "\3\0\2\u0201\101\0\1\4\1\u0202\3\0\1\u0202\1\u0203"+
    "\102\0\1\u0203\3\0\2\u0203\101\0\2\4\3\0\1\4"+
    "\1\u0204\102\0\1\u0204\3\0\2\u0204\76\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[35640];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\10\1\1\11\2\1\1\11\5\1\2\11"+
    "\1\1\1\11\37\1\1\11\1\1\2\0\3\1\3\0"+
    "\17\1\2\0\35\1\1\0\10\1\1\0\6\1\1\0"+
    "\20\1\2\0\57\1\1\0\3\1\1\11\23\1\2\0"+
    "\51\1\1\0\24\1\1\0\50\1\1\0\17\1\1\0"+
    "\44\1\1\0\12\1\1\0\26\1\1\0\6\1\1\0"+
    "\21\1\1\0\16\1\1\0\10\1\1\0\6\1\1\0"+
    "\4\1\1\0\3\1\1\0\2\1\1\0\2\1\1\0"+
    "\2\1\1\0\2\1\1\0\2\1\1\0\2\1\1\0"+
    "\2\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[516];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

    /**

     * Create an empty lexer, yyrset will be called later to reset and assign

     * the reader

     */

    public DevCLexer() {

        super();

    }



    private Token token(TokenType type) {

        return new Token(type, yychar, yylength());

    }



    private Token token(TokenType type, int pairValue) {

        return new Token(type, yychar, yylength(), (byte)pairValue);

    }



    private static final byte PARAN     = 1;

    private static final byte BRACKET   = 2;

    private static final byte CURLY     = 3;
    
    private static final byte TYPE      = 4;





  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public DevCLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public DevCLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 180) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 8: 
          { return token(TokenType.OPERATOR,  -CURLY);
          }
        case 18: break;
        case 11: 
          { return token(TokenType.KEYWORD);
          }
        case 19: break;
        case 10: 
          { return token(TokenType.OPERATOR,  -BRACKET);
          }
        case 20: break;
        case 12: 
          { return token(TokenType.OPERATOR, -TYPE);
          }
        case 21: break;
        case 7: 
          { return token(TokenType.OPERATOR,  CURLY);
          }
        case 22: break;
        case 9: 
          { return token(TokenType.OPERATOR,  BRACKET);
          }
        case 23: break;
        case 4: 
          { return token(TokenType.OPERATOR);
          }
        case 24: break;
        case 6: 
          { return token(TokenType.OPERATOR,  -PARAN);
          }
        case 25: break;
        case 17: 
          { return token(TokenType.KEYWORD2);
          }
        case 26: break;
        case 2: 
          { return token(TokenType.IDENTIFIER);
          }
        case 27: break;
        case 5: 
          { return token(TokenType.OPERATOR,  PARAN);
          }
        case 28: break;
        case 14: 
          { return token(TokenType.STRING);
          }
        case 29: break;
        case 16: 
          { return token(TokenType.COMMENT);
          }
        case 30: break;
        case 13: 
          { return token(TokenType.OPERATOR, TYPE);
          }
        case 31: break;
        case 15: 
          { return token(TokenType.TYPE);
          }
        case 32: break;
        case 3: 
          { return token(TokenType.NUMBER);
          }
        case 33: break;
        case 1: 
          { 
          }
        case 34: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {
                return null;
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
