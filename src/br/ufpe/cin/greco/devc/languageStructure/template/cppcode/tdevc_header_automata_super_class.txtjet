<%@jet package="br.ufpe.cin.greco.devc.languageStructure.tdevctemplate" imports="br.ufpe.cin.greco.devc.languageStructure.* br.ufpe.cin.greco.devc.languageStructure.type.* br.ufpe.cin.greco.devc.languageStructure.automata.* java.util.*" class="TDEVCHeaderAutomataSuperClass" %>
<%
TDCCheckerGenerator tdgen = (TDCCheckerGenerator)argument;
Service service = tdgen.getCurrentService();
%>
//*************************************************************************\\
//***********               tdc_automata.h      		***********\\
//*************************************************************************\\
//*************************************************************************\\
//*********** 		        UFPE/Cin - Greco		***********\\
//*********** 		 http://www.cin.ufpe.br/~greco 		***********\\
//***********							***********\\
//***********							***********\\
//*********** 		    By Rafael Melo Macieira		***********\\
//***********							***********\\
//***********		    E-mail: rmm2@cin.ufpe.br		***********\\
//*************************************************************************\\
//*************************************************************************\\
//**		 Automata Reference for the temporal check		 **\\
//**	   	 VIRTUAL CLASS                                           **\\
//*************************************************************************\\


#ifndef TDC_AUTOMATA_H
#define TDC_AUTOMATA_H

#include <string>
#include <stdlib.h>
#include <sstream>

class TDC_Automata;
class VarList;
class AutomataList;

class AutomataList {
private:
    unsigned int platformAddr;
    //    TDC_Automata *automata;
    AutomataList *nextAutomata;
    int EOL;

public:
    TDC_Automata *automata;
    AutomataList(unsigned int platformAddr, TDC_Automata* automata);
    void addNextAutomata(AutomataList *automataList);
    AutomataList* getNextAutomata();
    TDC_Automata* getAutomata();
    void setAutomata(TDC_Automata *automata);
    unsigned int getPlatformAddr();
    bool isEOL();
    AutomataList* getAutomataListByPlatformAddr(AutomataList* mainAutomataList, unsigned int platformAddr);
    bool contains(AutomataList* mainAutomataList, unsigned int platformAddr);
};

class VarList {
private:

	static const short PLATFORM_WORD_LEN = 32;
    unsigned int platformAddr;
    unsigned int *var;
    unsigned int read_var;
    VarList *nextVar;
    int EOL;
    int updated;
    bool readable;
    bool writable;
    unsigned int bitUsageCounter[PLATFORM_WORD_LEN];
    unsigned short bitLastValue[PLATFORM_WORD_LEN];
    void resetBitLastValue();
    void countBitUsage(unsigned int value);

public:
    VarList(unsigned int platformAddr, std::string name, unsigned int *var, bool readable, bool writable);
    std::string name;
    void addNextVar(VarList *varList);
    VarList* getNextVar();
    unsigned int* getVar();
    void setVar(unsigned int *var);
    unsigned int getReadVar();
    void setReadVar(unsigned int var);
    unsigned int getPlatformAddr();
    bool isEOL();
    int isUpdated();
    void update();
    void undoUpdate();
    void clearAllUpdate(VarList* mainVarList);
    VarList* getVarListByPlatformAddr(VarList* mainVarList, unsigned int platformAddr);
    bool contains(VarList* mainVarList, unsigned int platformAddr);
	bool isWritable();
	bool isReadable();
	unsigned int* getBitUsageCounter();
	short getPlatformWordLen();
	
};

class TDC_Automata {
 private:

  enum StateID {A,R};
  StateID errorLastState;
  VarList *currentVarList;
  virtual void printRejection(StateID stateID);
  virtual int checkState(StateID stateID);
  virtual int checkInitialState();
  virtual StateID getNextState(StateID stateID);
  virtual void refreshVariables(VarList* currentVarList);

 public:
  unsigned int coverage[100];
  unsigned int steps;
  virtual std::string runStep(bool access_type, VarList* currentVarList, int* rError);
  virtual void reset();
  bool end;
  //StateID currentState;
  <%for (String regs : tdgen.getRegisters().keySet()) {%>
  unsigned int *<%=regs%>;
  unsigned int <%=regs%>_read_var;
  unsigned int <%=regs%>_read_var_updated; 
  <%}%>
  void addCoverageCount(unsigned int index);
  void setCurrentVarList(VarList *var);
  VarList* getCurrentVarList();
  std::string int2string(unsigned int number);
  bool access_type;
  char* name;
  std::string errorMsg;
  int errorValue;
  TDC_Automata(char* name, unsigned int automataSteps);

};

<%for (String field : tdgen.getAllFieldSignatures()) {%>
#define <%=field%>
<%}%>
<%for (String field : tdgen.getAllFieldMaskSignatures()) {%>
#define <%=field%>
<%}%>

#endif