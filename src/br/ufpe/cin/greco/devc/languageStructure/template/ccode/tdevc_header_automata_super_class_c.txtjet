<%@jet package="br.ufpe.cin.greco.devc.languageStructure.tdevctemplate.ccode" imports="br.ufpe.cin.greco.devc.languageStructure.* br.ufpe.cin.greco.devc.languageStructure.type.* br.ufpe.cin.greco.devc.languageStructure.automata.* java.util.*" class="TDEVCHeaderAutomataSuperClassC" %>
<%
TDCCheckerGenerator tdgen = (TDCCheckerGenerator)argument;
Service service = tdgen.getCurrentService();
%>
/**************************************************************************/
/***********               	tdc_automata.h      		***********/
/**************************************************************************/
/**************************************************************************/
/*********** 		        UFPE/Cin - Greco		***********/
/*********** 		 http://www.cin.ufpe.br/~greco 		***********/
/*********** 		    Copyright(C) 2011, 2012     	**********/
/***********							***********/
/*********** 		    By Rafael Melo Macieira		***********/
/***********							***********/
/***********		    E-mail: rmm2@cin.ufpe.br		***********/
/**************************************************************************/
/**************************************************************************/
/**		 Automata Reference for the temporal check		 **/
/**	   	 VIRTUAL CLASS                                           **/
/**************************************************************************/


#ifndef TDC_AUTOMATA_H
#define TDC_AUTOMATA_H

#define TRUE                1
#define FALSE               0
#define R                  -1
#define PLATFORM_WORD_LEN  32

//#include <string.h>
//#include <stdlib.h>
#include <unistd.h>
#include <stdio.h>
//#include <sstream.h>

typedef struct Cursor;
typedef struct TDC_Automata;
typedef struct VarList;
typedef struct AutomataList;

static const int INITIAL_STATE = 1;

typedef struct Cursor{
    int currentState;
    struct Cursor *nextCursor;
    char hasNext;
};

typedef struct AutomataList {
  unsigned int platformAddr;
  struct AutomataList *nextAutomata;
  int EOL;
  struct TDC_Automata *automata;
  //AutomataList(unsigned int platformAddr, TDC_Automata* automata);
};

typedef struct VarList {
  unsigned int platformAddr;
  char*name;
  unsigned int *var;
  unsigned int read_var;
  struct VarList *nextVar;
  int EOL;
  int updated;
  int readable; //b
  int writable; //b
  unsigned int *bitUsageCounter;
  unsigned short *bitLastValue;
  //std::string name;
  
  //VarList(unsigned int platformAddr, std::string name, unsigned int *var, bool readable, bool writable);
	
};
 
//typedef enum StateID {A,R};

typedef struct TDC_Automata {
  
  int errorLastState; //StateID
  struct VarList *currentVarList;
  unsigned int coverage[100];
  unsigned int steps;

  struct Cursor *mainCursor;
  
  int end;//b
  <%for (String regs : tdgen.getRegisters().keySet()) {%>
  unsigned int *<%=regs%>;
  unsigned int <%=regs%>_read_var;
  unsigned int <%=regs%>_read_var_updated; 
  <%}%>
  int access_type;//b
  char* name;
  //std::string errorMsg;
  char* errorMsg;
  int errorValue;
  //TDC_Automata(char* name, unsigned int automataSteps);

  void (*printRejection)(int stateID);
  int (*checkState)(int stateID);
  int (*checkInitialState)();
  int (*getNextState)(struct TDC_Automata* currentAutomata, int stateID);
  void (*refreshVariables)(struct TDC_Automata* currentAutomata, struct VarList* currentVarList);
  char* (*runStep)(struct TDC_Automata* currentAutomata, int access_type, struct VarList* currentVarList, int* rError);
  void (*reset)(struct TDC_Automata* currentAutomata);

};

void addNextAutomata(struct AutomataList* currentAutomatalist, struct AutomataList *automataList);
struct AutomataList* getNextAutomata(struct AutomataList* automataList);
struct TDC_Automata* getAutomata(struct AutomataList* automataList);
void setAutomata(struct AutomataList* automataList, struct TDC_Automata *automata);
unsigned int getAutomataPlatformAddr(struct AutomataList* automataList);
char isVarListEOL(struct VarList* varList);
char isAutomataEOL(struct AutomataList* automataList);
struct AutomataList* getAutomataListByPlatformAddr(struct AutomataList* mainAutomataList, unsigned int platformAddr);
char containsAutomata(struct AutomataList* mainAutomataList, unsigned int platformAddr);
int containsVar(struct VarList* mainVarList, unsigned int platformAddr);
void resetBitLastValue(struct VarList *varList);
void countBitUsage(struct VarList *varList, unsigned int value);
void addNextVar(struct VarList *currentVarList, struct VarList *varList);
struct VarList* getNextVar();
unsigned int* getVar();
void setVar(struct VarList *varList, unsigned int *var);
unsigned int getReadVar();
void setReadVar(struct VarList *varList, unsigned int var);
unsigned int getPlatformAddr();
char isEOL();
int isUpdated();
void update();
void undoUpdate();
void clearAllUpdate(struct VarList* mainVarList);
struct VarList* getVarListByPlatformAddr(struct VarList* mainVarList, unsigned int platformAddr);
char contains(struct VarList* mainVarList, unsigned int platformAddr);
char isWritable(struct VarList *varList);
char isReadable(struct VarList *varList);
unsigned int* getBitUsageCounter();
short getPlatformWordLen();
void addCoverageCount(struct TDC_Automata *automata, unsigned int index);
void setCurrentVarList(struct TDC_Automata *automata, struct VarList *var);
struct VarList* getCurrentVarList();

/*std::string int2string(unsigned int number);
virtual */

<%for (String field : tdgen.getAllFieldSignatures()) {%>
#define <%=field%>
<%}%>
<%for (String field : tdgen.getAllFieldMaskSignatures()) {%>
#define <%=field%>
<%}%>

#endif