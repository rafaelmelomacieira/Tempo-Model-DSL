<%@jet package="br.ufpe.cin.greco.devc.languageStructure.tdevctemplate" imports="br.ufpe.cin.greco.devc.languageStructure.* br.ufpe.cin.greco.devc.languageStructure.type.* br.ufpe.cin.greco.devc.languageStructure.automata.* java.util.*" class="TDEVCAutomatas" %>
<%TDCCheckerGenerator tdgen = (TDCCheckerGenerator)argument;
Service service = tdgen.getCurrentService();%>
//*************************************************************************\\
//*************************************************************************\\
//*********** 		        UFPE/Cin - Greco		***********\\
//*********** 		 http://www.cin.ufpe.br/~greco 		***********\\
//***********							***********\\
//***********							***********\\
//*********** 		    By Rafael Melo Macieira		***********\\
//***********							***********\\
//***********		    E-mail: rmm2@cin.ufpe.br		***********\\
//*************************************************************************\\
//*************************************************************************\\
//
//File: tdc_automata_<%=service.getName()%>.cpp
//Desc: Automata for the temporal check of the
// <%=service.getName()%> service
//*************************************************************************\\

#include <stdio.h>
#include <iostream>
#include "headers/tdc_automata_<%=service.getName()%>.h"
#include "headers/address.h"
/*#include "tdc_automata_<%=service.getName()%>.h"
#include "address.h"*/

void TDC_Automata_<%=service.getName()%>::printRejection(StateID stateID) {

};

int TDC_Automata_<%=service.getName()%>::checkState(StateID stateID) {
    return 0;
};

int TDC_Automata_<%=service.getName()%>::checkInitialState() {
    return checkState(INITIAL_STATE);
};

TDC_Automata_<%=service.getName()%>::StateID TDC_Automata_<%=service.getName()%>::getNextState(StateID stateID) {

	switch (stateID) {
<%=service.getCode(CodeLanguage.CPP)%>
	}
	return R;
};

void TDC_Automata_<%=service.getName()%>::createCursor(StateID state){
	Cursor newCursor;
	newCursor.currentState = state;
	newCursor.hasNext = false;
	this->mainCursor->hasNext = true;
	this->mainCursor->nextCursor = &newCursor;
};

void TDC_Automata_<%=service.getName()%>::CheckAllCursor(){
	
};

std::string TDC_Automata_<%=service.getName()%>::runStep(bool access_type, VarList* mainVarList, int* rError) {

	std::string msg;
	Cursor *currentCursor;
	StateID tmp_currentState;
	bool allRejected = true;
	bool oneAceppted = false;
	msg = "Normal Move";
    this->access_type = access_type;
    this->refreshVariables(mainVarList);
    currentCursor = this->mainCursor;
    
    
    currentCursor->currentState = this->getNextState(currentCursor->currentState);
    switch (currentCursor->currentState) {
        case <%=service.getLastNode().getName()%>:
            oneAceppted = true;
            //std::cout << "<%=service.getName()%> A 1";
            allRejected = false;
            break;
        case R:
        	//std::cout << "<%=service.getName()%> R 1";
        	msg = "Ok!";
        	break;
        default:
        	//std::cout << "<%=service.getName()%> D 1";
        	allRejected = false;
        	break;
    }
    
    
    
    while(currentCursor->hasNext){
    	currentCursor = currentCursor->nextCursor;
    	currentCursor->currentState = this->getNextState(currentCursor->currentState);
    	std::cout << "Other Cursor @ <%=service.getName()%>\n";
    	switch (currentCursor->currentState) {
	        case <%=service.getLastNode().getName()%>:
				oneAceppted = true;
				//std::cout << "<%=service.getName()%> A 2";
	            allRejected = false;
	            break;
	        case R:
	        	//std::cout << "<%=service.getName()%> R 2";
	    		msg = "Ok!";
	    		break;    	
	        default:
	        	//std::cout << "<%=service.getName()%> D 2";
	        	allRejected = false;
	        	break;
	    	}
    }
    
    if (oneAceppted){
    	this->end = true;
    	//std::cout << "<%=service.getName()%> Acabou!";
		msg = "Ok!";
		*rError = 0;
		return msg;
    }
    if (allRejected){
    	msg = "\n ** [TemporalDevC] :: Rejected State! - <%=service.getName()%> :: " + errorMsg + " " + int2string(errorValue);
		//this->currentState = tmp_currentState;
		//std::cout << "<%=service.getName()%> Rejected!!!";
		*rError = 1;
		return msg;
    }
    *rError = 0;
	return msg;
   
};

void TDC_Automata_<%=service.getName()%>::refreshVariables(VarList* mainVarList) {
  <%//for (String reg_al : tdgen.getAllFieldVariableAssignment().keySet()) {%>
  //unsigned int *<%//reg_al%>;
 <%//}%>
 <%for (String reg : tdgen.getRegisters().keySet()) {%>
  VarList* current_<%=reg%> = mainVarList->getVarListByPlatformAddr(mainVarList,<%=reg.toUpperCase()%>_ADDR);
 <%}%>
 <%for (String reg : tdgen.getRegisters().keySet()) {%>
  <%=reg%>_read_var_updated = current_<%=reg%>->isUpdated();
  <%=reg%>_read_var = current_<%=reg%>->getReadVar();
  <%=reg%> = current_<%=reg%>->getVar();
 <%}%>
 <%//for (String reg_al : tdgen.getAllFieldVariableAssignment().keySet()) {%>
  <%//reg_al%>// = <%//tdgen.getAllFieldVariableAssignment().get(reg_al)%>;
 <%//}%>
};

void TDC_Automata_<%=service.getName()%>::reset(){
	this->mainCursor->hasNext = false;
	this->mainCursor->currentState = <%=service.getRootNode().getName()%>;
	//this->currentState = <%=service.getRootNode().getName()%>;
	this->end = false;
};

TDC_Automata_<%=service.getName()%>::TDC_Automata_<%=service.getName()%>(VarList* mainVarList) : TDC_Automata("<%=service.getName()%>",<%=service.getFlowCoverageList().size()%>){//, mainVarList) {
	Cursor cursor;
	cursor.hasNext = false;
	cursor.currentState = <%=service.getRootNode().getName()%>;
	this->mainCursor = &cursor;
    this->refreshVariables(mainVarList);
}

/*TDC_Automata_<%=service.getName()%>::~TDC_Automata_<%=service.getName()%>() {
	if (currentState != <%=service.getLastNode().getName()%>){ 
    	printf("<%=service.getName()%> - Rejected - This automata was not closed in a valid final state!");
    }
}*/