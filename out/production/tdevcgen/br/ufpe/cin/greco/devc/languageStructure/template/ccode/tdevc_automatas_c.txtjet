<%@jet package="br.ufpe.cin.greco.devc.languageStructure.tdevctemplate.ccode" imports="br.ufpe.cin.greco.devc.languageStructure.* br.ufpe.cin.greco.devc.languageStructure.type.* br.ufpe.cin.greco.devc.languageStructure.automata.* java.util.*" class="TDEVCAutomatasC" %>
<%TDCCheckerGenerator tdgen = (TDCCheckerGenerator)argument;
Service service = tdgen.getCurrentService();%>
/*************************************************************************/
/*************************************************************************/
/*********** 		        UFPE/Cin - Greco		**********/
/*********** 		 http://www.cin.ufpe.br/~greco 		**********/
/*********** 		    Copyright(C) 2011, 2012     	**********/
/***********							**********/
/*********** 		    By Rafael Melo Macieira		**********/
/***********							**********/
/***********		    E-mail: rmm2@cin.ufpe.br		**********/
/*************************************************************************/
/*************************************************************************/
/**									**/
/**File: tdc_automata_<%=service.getName()%>.c					**/
/**Desc: Automata for the temporal check of the				**/
/** <%=service.getName()%> service						**/
/*************************************************************************/

#include <stdio.h>
#include "headers/tdc_automata_<%=service.getName()%>.h"
#include "headers/address.h"
#include <string.h>

void <%=service.getName()%>_printRejection(int stateID) {

};

int <%=service.getName()%>_checkState(int stateID) {
    return 0;
};

int <%=service.getName()%>_checkInitialState() {
    return <%=service.getName()%>_checkState(INITIAL_STATE);
};

int <%=service.getName()%>_getNextState(struct TDC_Automata* currentAutomata, int stateID) {

	switch (stateID) {
<%=service.getCode(CodeLanguage.C)%>
	}
	return R;
};

void <%=service.getName()%>_createCursor(struct TDC_Automata* currentAutomata, int state){
  struct Cursor *newCursor;
  newCursor = malloc(sizeof(struct Cursor));
  newCursor->currentState = state;
  newCursor->hasNext = FALSE;
  currentAutomata->mainCursor->hasNext = TRUE;
  currentAutomata->mainCursor->nextCursor = newCursor;
};

void <%=service.getName()%>_CheckAllCursor(){
	
};

char* <%=service.getName()%>_runStep(struct TDC_Automata* currentAutomata, char access_type,struct VarList* mainVarList, int* rError) {

  char *msg;
  struct Cursor *currentCursor;
  int tmp_currentState;
  char allRejected = TRUE;
  char oneAceppted = FALSE;
  msg = "Normal Move";
  currentAutomata->access_type = access_type;
  currentAutomata->refreshVariables(currentAutomata,mainVarList);
  currentCursor = currentAutomata->mainCursor;
    
    currentCursor->currentState = currentAutomata->getNextState(currentAutomata, currentCursor->currentState);
    switch (currentCursor->currentState) {
        case <%=service.getLastNode().getName()%>:
            oneAceppted = TRUE;
            allRejected = FALSE;
            break;
        case R:
        	msg = "Ok!";
        	break;
        default:
        	allRejected = FALSE;
        	break;
    }
    
    
    
    while(currentCursor->hasNext){
    	currentCursor = currentCursor->nextCursor;
 	    currentCursor->currentState = currentAutomata->getNextState(currentAutomata, currentCursor->currentState);
    	switch (currentCursor->currentState) {
	        case <%=service.getLastNode().getName()%>:
				oneAceppted = TRUE;
	            allRejected = FALSE;
	            break;
	        case R:
	    		msg = "Ok!";
	    		break;    	
	        default:
	        	allRejected = FALSE;
	        	break;
	    	}
    }
    
    if (oneAceppted){
    	currentAutomata->end = TRUE;
		msg = "Ok!";
		*rError = 0;
		return msg;
    }
    if (allRejected){
    msg = (char *) malloc(500 * sizeof(char));
        sprintf(msg, "\n ** [TemporalDevC] :: Rejected State! <%=service.getName()%> :: %s %d", currentAutomata->errorMsg, currentAutomata->errorValue);
		//this->currentState = tmp_currentState;
		*rError = 1;
		return msg;
    }
    *rError = 0;
	return msg;
   
};

void <%=service.getName()%>_refreshVariables(struct TDC_Automata* currentAutomata, struct VarList* mainVarList) {
  <%//for (String reg_al : tdgen.getAllFieldVariableAssignment().keySet()) {%>
  //unsigned int *<%//reg_al%>;
 <%//}%>
 <%for (String reg : tdgen.getRegisters().keySet()) {%>
  struct VarList* current_<%=reg%> = getVarListByPlatformAddr(mainVarList,<%=reg.toUpperCase()%>_ADDR); 
 <%}%>
 <%for (String reg : tdgen.getRegisters().keySet()) {%>
  currentAutomata-><%=reg%>_read_var_updated = isUpdated(current_<%=reg%>);
  currentAutomata-><%=reg%>_read_var = getReadVar(current_<%=reg%>);
  currentAutomata-><%=reg%> = getVar(current_<%=reg%>);
 <%}%>
 <%//for (String reg_al : tdgen.getAllFieldVariableAssignment().keySet()) {%>
  <%//reg_al%>// = <%//tdgen.getAllFieldVariableAssignment().get(reg_al)%>;
 <%//}%>
};

void <%=service.getName()%>_reset(struct TDC_Automata* currentAutomata){
  currentAutomata->mainCursor->hasNext = FALSE;
  currentAutomata->mainCursor->currentState = 1;
  currentAutomata->end = FALSE;
};

/*TDC_Automata_<%=service.getName()%>::TDC_Automata_<%=service.getName()%>(VarList* mainVarList) : TDC_Automata("<%=service.getName()%>",<%=service.getFlowCoverageList().size()%>){//, mainVarList) {
	Cursor cursor;
	cursor.hasNext = false;
	cursor.currentState = <%=service.getRootNode().getName()%>;
	this->mainCursor = &cursor;
    this->refreshVariables(mainVarList);
}*/

struct TDC_Automata* <%=service.getName()%>_initialize(struct VarList* mainVarList) { //"lcdpcf8833_init", 5) {//, mainVarList) {
  struct TDC_Automata* currentAutomata;
  struct Cursor* cursor;
  cursor = (struct Cursor*) malloc(sizeof(struct Cursor));
  currentAutomata = (struct TDC_Automata*) malloc(sizeof(struct TDC_Automata));
  cursor->hasNext = FALSE;
  cursor->currentState = 1;
  currentAutomata->mainCursor = cursor;
  <%=service.getName()%>_refreshVariables(currentAutomata,mainVarList);
  currentAutomata->name = "<%=service.getName()%>";
  currentAutomata->steps = <%=service.getFlowCoverageList().size()%>;

  currentAutomata->printRejection = <%=service.getName()%>_printRejection;
  currentAutomata->checkState = <%=service.getName()%>_checkState;
  currentAutomata->checkInitialState = <%=service.getName()%>_checkInitialState;
  currentAutomata->getNextState = <%=service.getName()%>_getNextState;
  currentAutomata->refreshVariables = <%=service.getName()%>_refreshVariables;
  currentAutomata->runStep = <%=service.getName()%>_runStep;
  currentAutomata->reset = &<%=service.getName()%>_reset;

  return currentAutomata;
};

/*TDC_Automata_<%=service.getName()%>::~TDC_Automata_<%=service.getName()%>() {
	if (currentState != <%=service.getLastNode().getName()%>){ 
    	printf("<%=service.getName()%> - Rejected - This automata was not closed in a valid final state!");
    }
}*/